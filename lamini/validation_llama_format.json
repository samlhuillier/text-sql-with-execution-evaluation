[{"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: How many singers do we have? ", "output": "SELECT count(*) FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the total number of singers? ", "output": "SELECT count(*) FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. ", "output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names, countries, and ages for every singer in descending order of age? ", "output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the average, minimum, and maximum age of all singers from France? ", "output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the average, minimum, and maximum age for all French singers? ", "output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show the name and the release year of the song by the youngest singer. ", "output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names and release years for all the songs of the youngest singer? ", "output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are all distinct countries where singers above age 20 are from? ", "output": "SELECT DISTINCT country FROM singer WHERE age  >  20;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are  the different countries with singers above age 20? ", "output": "SELECT DISTINCT country FROM singer WHERE age  >  20;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show all countries and the number of singers in each country. ", "output": "SELECT country ,  count(*) FROM singer GROUP BY country;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: How many singers are from each country? ", "output": "SELECT country ,  count(*) FROM singer GROUP BY country;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: List all song names by singers above the average age. ", "output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are all the song names by singers who are older than average? ", "output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show location and name for all stadiums with a capacity between 5000 and 10000. ", "output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the locations and names of all stations with capacity between 5000 and 10000? ", "output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the maximum capacity and the average of all stadiums ? ", "output": "select max(capacity), average from stadium;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the average and maximum capacities for all stadiums ? ", "output": "select avg(capacity) ,  max(capacity) from stadium;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the name and capacity for the stadium with highest average attendance? ", "output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the name and capacity for the stadium with the highest average attendance? ", "output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: How many concerts are there in year 2014 or 2015? ", "output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: How many concerts occurred in 2014 or 2015? ", "output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show the stadium name and the number of concerts in each stadium. ", "output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: For each stadium, how many concerts play there? ", "output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. ", "output": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the name and capacity of the stadium with the most concerts after 2013 ? ", "output": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Which year has most number of concerts? ", "output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the year that had the most concerts? ", "output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show the stadium names without any concert. ", "output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names of the stadiums without any concerts? ", "output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show countries where a singer above age 40 and a singer below 30 are from. ", "output": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show names for all stadiums except for stadiums having a concert in year 2014. ", "output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names of all stadiums that did not have a concert in 2014? ", "output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Show the name and theme for all concerts and the number of singers in each concert. ", "output": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names , themes , and number of singers for every concert ? ", "output": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: List singer names and number of concerts for each singer. ", "output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names of the singers and number of concerts for each person? ", "output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: List all singer names in concerts in year 2014. ", "output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names of the singers who performed in a concert in 2014? ", "output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: what is the name and nation of the singer who have a song having 'Hey' in its name? ", "output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? ", "output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. ", "output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? ", "output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: Find the number of concerts happened in the stadium with the highest capacity . ", "output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nstadium :\nStadium_ID [ INT ] primary_key\nLocation [ TEXT ]\nName [ TEXT ]\nCapacity [ INT ]\nHighest [ INT ]\nLowest [ INT ]\nAverage [ INT ]\n\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nCountry [ TEXT ]\nSong_Name [ TEXT ]\nSong_release_year [ TEXT ]\nAge [ INT ]\nIs_male [ bool ]\n\nconcert :\nconcert_ID [ INT ] primary_key\nconcert_Name [ TEXT ]\nTheme [ TEXT ]\nStadium_ID [ TEXT ] concert.Stadium_ID = stadium.Stadium_ID\nYear [ TEXT ]\n\nsinger_in_concert :\nconcert_ID [ INT ] primary_key singer_in_concert.concert_ID = concert.concert_ID\nSinger_ID [ TEXT ] singer_in_concert.Singer_ID = singer.Singer_ID\n\nWrite an SQL query that answers the following: What are the number of concerts that occurred in the stadium with the largest capacity ? ", "output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the number of pets whose weight is heavier than 10. ", "output": "SELECT count(*) FROM pets WHERE weight  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: How many pets have a greater weight than 10? ", "output": "SELECT count(*) FROM pets WHERE weight  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the weight of the youngest dog. ", "output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: How much does the youngest dog weigh? ", "output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. ", "output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: List the maximum weight and type for each type of pet. ", "output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find number of pets owned by students who are older than 20. ", "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: How many pets are owned by students that have an age greater than 20? ", "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the number of dog pets that are raised by female students (with sex F). ", "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: How many dog pets are raised by female students? ", "output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the number of distinct type of pets. ", "output": "SELECT count(DISTINCT pettype) FROM pets;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: How many different types of pet are there? ", "output": "SELECT count(DISTINCT pettype) FROM pets;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the first name of students who have cat or dog pet. ", "output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What are the first names of every student who has a cat or dog as a pet? ", "output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the first name of students who have both cat and dog pets . ", "output": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What are the students' first names who have both cats and dogs as pets? ", "output": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the major and age of students who do not have a cat pet. ", "output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What major is every student who does not own a cat as a pet, and also how old are they? ", "output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the id of students who do not have a cat pet. ", "output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What are the ids of the students who do not own cats as pets? ", "output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the first name and age of students who have a dog but do not have a cat as a pet. ", "output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the first name of every student who has a dog but does not have a cat? ", "output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the type and weight of the youngest pet. ", "output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What type of pet is the youngest animal, and how much does it weigh? ", "output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the id and weight of all pets whose age is older than 1. ", "output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the id and weight of every pet who is older than 1? ", "output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the average and maximum age for each type of pet. ", "output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the average and maximum age for each pet type? ", "output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the average weight for each pet type. ", "output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the average weight for each type of pet? ", "output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the first name and age of students who have a pet. ", "output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What are the different first names and ages of the students who do have pets? ", "output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. ", "output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the id of the pet owned by the student whose last name is 'Smith'? ", "output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the number of pets for each student who has any pet and student id. ", "output": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: For students who have pets , how many pets does each student have ? list their ids instead of names . ", "output": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the first name and gender of student who have more than one pet. ", "output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the first name and gender of the all the students who have more than one pet? ", "output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the last name of the student who has a cat that is age 3. ", "output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the last name of the student who has a cat that is 3 years old? ", "output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: Find the average age of students who do not have any pet . ", "output": "select avg(age) from student where stuid not in (select stuid from has_pet);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nStudent :\nStuID [ INT ] primary_key\nLName [ TEXT ]\nFname [ TEXT ]\nAge [ INT ]\nSex [ TEXT ]\nMajor [ INT ]\nAdvisor [ INT ]\ncity_code [ TEXT ]\n\nHas_Pet :\nStuID [ INT ] Has_Pet.StuID = Student.StuID\nPetID [ INT ] Has_Pet.PetID = Pets.PetID\n\nPets :\nPetID [ INT ] primary_key\nPetType [ TEXT ]\npet_age [ INT ]\nweight [ INT ]\n\nWrite an SQL query that answers the following: What is the average age for all students who do not own any pets ? ", "output": "select avg(age) from student where stuid not in (select stuid from has_pet);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many continents are there? ", "output": "SELECT count(*) FROM CONTINENTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of continents? ", "output": "SELECT count(*) FROM CONTINENTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many countries does each continent have? List the continent id, continent name and the number of countries. ", "output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: For each continent, list its id, name, and how many countries it has? ", "output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many countries are listed? ", "output": "SELECT count(*) FROM COUNTRIES;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many countries exist? ", "output": "SELECT count(*) FROM COUNTRIES;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many models does each car maker produce? List maker full name, id and the number. ", "output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the full name of each car maker, along with its id and how many models it produces? ", "output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which model of the car has the minimum horsepower? ", "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the model of the car with the smallest amount of horsepower? ", "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Find the model of the car whose weight is below the average weight. ", "output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the model for the car with a weight smaller than the average? ", "output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Find the name of the makers that produced some cars in the year of 1970? ", "output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the different car makers who produced a car in 1970? ", "output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Find the make and production time of the cars that were produced in the earliest year? ", "output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maker of the carr produced in the earliest year and what year was it? ", "output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which distinct car models are the produced after 1980? ", "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the different models for the cards produced after 1980? ", "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many car makers are there in each continents? List the continent name and the count. ", "output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the name of each continent and how many car makers are there in each one? ", "output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which of the countries has the most car makers? List the country name. ", "output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the country with the most car makers? ", "output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many car models are produced by each maker ? Only list the count and the maker full name . ", "output": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? ", "output": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the accelerate of the car make amc hornet sportabout (sw)? ", "output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How much does the car accelerate that makes amc hornet sportabout (sw)? ", "output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many car makers are there in france? ", "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of makers of care in France? ", "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many car models are produced in the usa? ", "output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the count of the car models produced in the United States? ", "output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? ", "output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average miles per gallon of all the cards with 4 cylinders? ", "output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? ", "output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? ", "output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are all the makers and models? ", "output": "SELECT Maker ,  Model FROM MODEL_LIST;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the makers and models? ", "output": "SELECT Maker ,  Model FROM MODEL_LIST;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the countries having at least one car maker? List name and id. ", "output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the names and ids of all countries with at least one car maker? ", "output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of the cars with horsepower more than 150? ", "output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of cars with a horsepower greater than 150? ", "output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average weight of cars each year? ", "output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average weight and year for each year? ", "output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which countries in europe have at least 3 car manufacturers? ", "output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the names of all European countries with at least 3 manufacturers? ", "output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum horsepower and the make of the car models with 3 cylinders? ", "output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? ", "output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. ", "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the car model with the highest mpg ? ", "output": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average horsepower of the cars before 1980? ", "output": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average horsepower for all cars produced before 1980 ? ", "output": "select avg(horsepower) from cars_data where year  <  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average edispl of the cars of model volvo? ", "output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the average edispl for all volvos? ", "output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum accelerate for different number of cylinders? ", "output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum accelerate for all the different cylinders? ", "output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which model has the most version(make) of cars? ", "output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What model has the most different versions? ", "output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many cars have more than 4 cylinders? ", "output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of cars with more than 4 cylinders? ", "output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: how many cars were produced in 1980? ", "output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: In 1980, how many cars were made? ", "output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many car models were produced by the maker with full name American Motor Company? ", "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of car models created by the car maker American Motor Company? ", "output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which makers designed more than 3 car models? List full name and the id. ", "output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the names and ids of all makers with more than 3 models? ", "output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? ", "output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the different models created by either the car maker General Motors or weighed more than 3500? ", "output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? ", "output": "select distinct year from cars_data where weight between 3000 and 4000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? ", "output": "select distinct year from cars_data where weight between 3000 and 4000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the horsepower of the car with the largest accelerate? ", "output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the horsepower of the car with the greatest accelerate? ", "output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: For model volvo, how many cylinders does the car with the least accelerate have? ", "output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: For a volvo model, how many cylinders does the version with least accelerate have? ", "output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many cars have a larger accelerate than the car with the largest horsepower? ", "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of cars with a greater accelerate than the one with the most horsepower? ", "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many countries has more than 2 car makers ? ", "output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of countries with more than 2 car makers ? ", "output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: How many cars has over 6 cylinders? ", "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the number of carsw ith over 6 cylinders? ", "output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: For the cars with 4 cylinders, which model has the largest horsepower? ", "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: For all of the 4 cylinder cars, which model has the most horsepower? ", "output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. ", "output": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? ", "output": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? ", "output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? ", "output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? ", "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? ", "output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the name of the countries where there is not a single car maker? ", "output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the countries with no car makers? ", "output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . ", "output": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? ", "output": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? ", "output": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncontinents :\nContId [ INT ] primary_key\nContinent [ TEXT ]\n\ncountries :\nCountryId [ INT ] primary_key\nCountryName [ TEXT ]\nContinent [ INT ] countries.Continent = continents.ContId\n\ncar_makers :\nId [ INT ] primary_key\nMaker [ TEXT ]\nFullName [ TEXT ]\nCountry [ TEXT ] car_makers.Country = countries.CountryId\n\nmodel_list :\nModelId [ INT ] primary_key\nMaker [ INT ] model_list.Maker = car_makers.Id\nModel [ TEXT ]\n\ncar_names :\nMakeId [ INT ] primary_key\nModel [ TEXT ] car_names.Model = model_list.Model\nMake [ TEXT ]\n\ncars_data :\nId [ INT ] primary_key cars_data.Id = car_names.MakeId\nMPG [ TEXT ]\nCylinders [ INT ]\nEdispl [ INT ]\nHorsepower [ TEXT ]\nWeight [ INT ]\nAccelerate [ INT ]\nYear [ INT ]\n\nWrite an SQL query that answers the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? ", "output": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which country does Airline \"JetBlue Airways\" belong to? ", "output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What country is Jetblue Airways affiliated with? ", "output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the abbreviation of Airline \"JetBlue Airways\"? ", "output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which abbreviation corresponds to Jetblue Airways? ", "output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: List all airline names and their abbreviations in \"USA\". ", "output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are the airline names and abbreviations for airlines in the USA? ", "output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: List the airport code and name in the city of Anthony. ", "output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the airport code and airport name corresonding to the city Anthony. ", "output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many airlines do we have? ", "output": "SELECT count(*) FROM AIRLINES;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the total number of airlines? ", "output": "SELECT count(*) FROM AIRLINES;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many airports do we have? ", "output": "SELECT count(*) FROM AIRPORTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of  airports. ", "output": "SELECT count(*) FROM AIRPORTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights do we have? ", "output": "SELECT count(*) FROM FLIGHTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of flights. ", "output": "SELECT count(*) FROM FLIGHTS;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airline has abbreviation 'UAL'? ", "output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the airline with abbreviation 'UAL'. ", "output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many airlines are from USA? ", "output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of airlines in the USA. ", "output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which city and country is the Alton airport at? ", "output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the city and country for the Alton airport. ", "output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the airport name for airport 'AKO'? ", "output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the name of the airport with code 'AKO'. ", "output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are airport names at City 'Aberdeen'? ", "output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are the names of airports in Aberdeen? ", "output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights depart from 'APG'? ", "output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Count the number of flights departing from 'APG'. ", "output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights have destination ATO? ", "output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Count the number of flights into ATO. ", "output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights depart from City Aberdeen? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of flights departing from Aberdeen. ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights arriving in Aberdeen city? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of flights arriving in Aberdeen. ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights fly from Aberdeen to Ashley? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights does airline 'JetBlue Airways' have? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the number of Jetblue Airways flights. ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many 'United Airlines' flights go to Airport 'ASY'? ", "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Count the number of United Airlines flights arriving in ASY Airport. ", "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many 'United Airlines' flights depart from Airport 'AHD'? ", "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Return the number of United Airlines flights leaving from AHD Airport. ", "output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many United Airlines flights go to City 'Aberdeen'? ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Count the number of United Airlines flights that arrive in Aberdeen. ", "output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which city has most number of arriving flights? ", "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which city has the most frequent destination airport? ", "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which city has most number of departing flights? ", "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which city is the most frequent source airport? ", "output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the code of airport that has the highest number of flights? ", "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the airport code of the airport with the most flights? ", "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the code of airport that has fewest number of flights? ", "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the code of the airport with the least flights. ", "output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airline has most number of flights? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What airline serves the most flights? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find the abbreviation and country of the airline that has fewest number of flights? ", "output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? ", "output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are airlines that have some flight departing from airport 'AHD'? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have a flight with source airport AHD? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are airlines that have flights arriving at airport 'AHD'? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have a flight with destination airport AHD? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have departing flights from both APG and CVO airports? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have departures from CVO but not from APG airports? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find all airlines that have at least 10 flights. ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have at least 10 flights? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find all airlines that have fewer than 200 flights. ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airlines have less than 200 flights? ", "output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are flight numbers of Airline \"United Airlines\"? ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which flight numbers correspond to United Airlines flights? ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are flight numbers of flights departing from Airport \"APG\"? ", "output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the flight numbers of flights leaving from APG. ", "output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are flight numbers of flights arriving at Airport \"APG\"? ", "output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the flight numbers of flights landing at APG. ", "output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are flight numbers of flights departing from City \"Aberdeen \"? ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the flight numbers of flights leaving from Aberdeen. ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: What are flight numbers of flights arriving at City \"Aberdeen\"? ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Give the flight numbers of flights arriving in Aberdeen. ", "output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find the number of flights landing in the city of Aberdeen or Abilene. ", "output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: How many flights land in Aberdeen or Abilene? ", "output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Find the name of airports which do not have any flight in and out. ", "output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nairlines :\nuid [ INT ] primary_key\nAirline [ TEXT ]\nAbbreviation [ TEXT ]\nCountry [ TEXT ]\n\nairports :\nCity [ TEXT ]\nAirportCode [ TEXT ] primary_key\nAirportName [ TEXT ]\nCountry [ TEXT ]\nCountryAbbrev [ TEXT ]\n\nflights :\nAirline [ INT ] primary_key\nFlightNo [ INT ]\nSourceAirport [ TEXT ] flights.SourceAirport = airports.AirportCode\nDestAirport [ TEXT ] flights.DestAirport = airports.AirportCode\n\nWrite an SQL query that answers the following: Which airports do not have departing or arriving flights? ", "output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: How many employees are there? ", "output": "SELECT count(*) FROM employee;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Count the number of employees ", "output": "SELECT count(*) FROM employee;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Sort employee names by their age in ascending order. ", "output": "SELECT name FROM employee ORDER BY age;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: List the names of employees and sort in ascending order of age. ", "output": "SELECT name FROM employee ORDER BY age;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What is the number of employees from each city? ", "output": "SELECT count(*) ,  city FROM employee GROUP BY city;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Count the number of employees for each city. ", "output": "SELECT count(*) ,  city FROM employee GROUP BY city;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which cities do more than one employee under age 30 come from? ", "output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the cities that have more than one employee under age 30. ", "output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the number of shops in each location. ", "output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: How many shops are there in each location? ", "output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the manager name and district of the shop whose number of products is the largest. ", "output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What are the manager name and district of the shop that sells the largest number of products? ", "output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: find the minimum and maximum number of products of all stores. ", "output": "SELECT min(Number_products) ,  max(Number_products) FROM shop;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What are the minimum and maximum number of products across all the shops? ", "output": "SELECT min(Number_products) ,  max(Number_products) FROM shop;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Return the name, location and district of all shops in descending order of number of products. ", "output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. ", "output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the names of stores whose number products is more than the average number of products. ", "output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which shops' number products is above the average? Give me the shop names. ", "output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: find the name of employee who was awarded the most times in the evaluation. ", "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which employee received the most awards in evaluations? Give me the employee name. ", "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the name of the employee who got the highest one time bonus. ", "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which employee received the biggest bonus? Give me the employee name. ", "output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the names of employees who never won any award in the evaluation. ", "output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the employees who never received any evaluation? ", "output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the shop that is hiring the largest number of employees? ", "output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which shop has the most employees? Give me the shop name. ", "output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the name of the shops that do not hire any employee. ", "output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which shops run with no employees? Find the shop names ", "output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the number of employees hired in each shop; show the shop name as well. ", "output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: For each shop, return the number of employees working there and the name of the shop. ", "output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What is total bonus given in all evaluations? ", "output": "SELECT sum(bonus) FROM evaluation;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the total amount of bonus given in all the evaluations. ", "output": "SELECT sum(bonus) FROM evaluation;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Give me all the information about hiring. ", "output": "SELECT * FROM hiring;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: What is all the information about hiring? ", "output": "SELECT * FROM hiring;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? ", "output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. ", "output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: How many different store locations are there? ", "output": "SELECT count(DISTINCT LOCATION) FROM shop;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nemployee :\nEmployee_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nCity [ TEXT ]\n\nshop :\nShop_ID [ INT ] primary_key\nName [ TEXT ]\nLocation [ TEXT ]\nDistrict [ TEXT ]\nNumber_products [ INT ]\nManager_name [ TEXT ]\n\nhiring :\nShop_ID [ INT ] hiring.Shop_ID = shop.Shop_ID\nEmployee_ID [ INT ] primary_key hiring.Employee_ID = employee.Employee_ID\nStart_from [ TEXT ]\nIs_full_time [ bool ]\n\nevaluation :\nEmployee_ID [ TEXT ] primary_key evaluation.Employee_ID = employee.Employee_ID\nYear_awarded [ TEXT ]\nBonus [ INT ]\n\nWrite an SQL query that answers the following: Count the number of distinct store locations. ", "output": "SELECT count(DISTINCT LOCATION) FROM shop;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many documents do we have? ", "output": "SELECT count(*) FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of documents. ", "output": "SELECT count(*) FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: List document IDs, document names, and document descriptions for all documents. ", "output": "SELECT document_id ,  document_name ,  document_description FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids, names, and descriptions for all documents? ", "output": "SELECT document_id ,  document_name ,  document_description FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the document name and template id for document with description with the letter 'w' in it? ", "output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the names and template ids for documents that contain the letter w in their description. ", "output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the document id, template id and description for document named \"Robbin CV\"? ", "output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the document id, template id, and description for the document with the name Robbin CV. ", "output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many different templates do all document use? ", "output": "SELECT count(DISTINCT template_id) FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of different templates used for documents. ", "output": "SELECT count(DISTINCT template_id) FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many documents are using the template with type code 'PPT'? ", "output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of documents that use the PPT template type. ", "output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template ids and number of documents using each template. ", "output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are all different template ids used for documents, and how many times were each of them used? ", "output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the id and type code for the template used by the most documents? ", "output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the id and type code of the template that is used for the greatest number of documents. ", "output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show ids for all templates that are used by more than one document. ", "output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the template ids of any templates used in more than a single document? ", "output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show ids for all templates not used by any document. ", "output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids for templates that are not used in any documents? ", "output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many templates do we have? ", "output": "SELECT count(*) FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of templates. ", "output": "SELECT count(*) FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show template ids, version numbers, and template type codes for all templates. ", "output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids, version numbers, and type codes for each template? ", "output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all distinct template type codes for all templates. ", "output": "SELECT DISTINCT template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the different template type codes? ", "output": "SELECT DISTINCT template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids of templates with template type code PP or PPT? ", "output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the ids of templates that have the code PP or PPT. ", "output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many templates have template type code CV? ", "output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of templates of the type CV. ", "output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the version number and template type code for the template with version number later than 5? ", "output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the version numbers and template type codes of templates with a version number greater than 5. ", "output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template type codes and number of templates for each. ", "output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the different template type codes, and how many templates correspond to each? ", "output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Which template type code has most number of templates? ", "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the type code of the template type that the most templates belong to. ", "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template type codes with less than three templates. ", "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the codes of template types that have fewer than 3 templates? ", "output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What the smallest version number and its template type code? ", "output": "SELECT min(Version_Number) ,  template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the lowest version number, along with its corresponding template type code. ", "output": "SELECT min(Version_Number) ,  template_type_code FROM Templates;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the template type code of the template used by document with the name \"Data base\"? ", "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the template type code of the template that is used by a document named Data base. ", "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all document names using templates with template type code BK. ", "output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the names of documents that use templates with the code BK? ", "output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template type codes and the number of documents using each type. ", "output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the different template type codes, and how many documents use each type? ", "output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Which template type code is used by most number of documents? ", "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the code of the template type that is most commonly used in documents. ", "output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template type codes that are not used by any document. ", "output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the codes of template types that are not used for any document? ", "output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all template type codes and descriptions. ", "output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the type codes and descriptions for all template types? ", "output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the template type descriptions for template type code \"AD\". ", "output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the template type description of the template type with the code AD. ", "output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the template type code for template type description \"Book\". ", "output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the type code of the template type with the description \"Book\". ", "output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the distinct template type descriptions for the templates ever used by any document? ", "output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the different descriptions for templates that have been used in a document. ", "output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the template ids with template type description \"Presentation\". ", "output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the ids corresponding to templates with the description 'Presentation'. ", "output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many paragraphs in total? ", "output": "SELECT count(*) FROM Paragraphs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of paragraphs. ", "output": "SELECT count(*) FROM Paragraphs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: How many paragraphs for the document with name 'Summer Show'? ", "output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Count the number of paragraphs in the document named 'Summer Show'. ", "output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show paragraph details for paragraph with text 'Korea ' . ", "output": "select other_details from paragraphs where paragraph_text like 'korea';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the details for the paragraph that includes the text 'Korea ' ? ", "output": "select other_details from paragraphs where paragraph_text like 'korea';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. ", "output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? ", "output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all paragraph texts for the document \"Customer reviews\". ", "output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the paragraph texts for the document with the name 'Customer reviews'? ", "output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all document ids and the number of paragraphs in each document. Order by document id. ", "output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. ", "output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show all document ids, names and the number of paragraphs in each document. ", "output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids and names of each document, as well as the number of paragraphs in each? ", "output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: List all document ids with at least two paragraphs. ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids of documents that have 2 or more paragraphs? ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the document id and name with greatest number of paragraphs? ", "output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the id and name of the document with the most paragraphs. ", "output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the document id with least number of paragraphs? ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Return the id of the document with the fewest paragraphs. ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What is the document id with 1 to 2 paragraphs? ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Give the ids of documents that have between one and two paragraphs. ", "output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. ", "output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Template_Types :\nTemplate_Type_Code [ TEXT ] primary_key\nTemplate_Type_Description [ TEXT ]\n\nTemplates :\nTemplate_ID [ INT ] primary_key\nVersion_Number [ INT ]\nTemplate_Type_Code [ TEXT ] Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDate_Effective_From [ TEXT ]\nDate_Effective_To [ TEXT ]\nTemplate_Details [ TEXT ]\n\nDocuments :\nDocument_ID [ INT ] primary_key\nTemplate_ID [ INT ] Documents.Template_ID = Templates.Template_ID\nDocument_Name [ TEXT ]\nDocument_Description [ TEXT ]\nOther_Details [ TEXT ]\n\nParagraphs :\nParagraph_ID [ INT ] primary_key\nDocument_ID [ INT ] Paragraphs.Document_ID = Documents.Document_ID\nParagraph_Text [ TEXT ]\nOther_Details [ TEXT ]\n\nWrite an SQL query that answers the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? ", "output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: How many teachers are there? ", "output": "SELECT count(*) FROM teacher;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What is the total count of teachers? ", "output": "SELECT count(*) FROM teacher;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: List the names of teachers in ascending order of age. ", "output": "SELECT Name FROM teacher ORDER BY Age ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers ordered by ascending age? ", "output": "SELECT Name FROM teacher ORDER BY Age ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the age and hometown of teachers? ", "output": "SELECT Age ,  Hometown FROM teacher;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What is the age and hometown of every teacher? ", "output": "SELECT Age ,  Hometown FROM teacher;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . ", "output": "select name from teacher where hometown != \"little lever urban district\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? ", "output": "select name from teacher where hometown != \"little lever urban district\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show the name of teachers aged either 32 or 33? ", "output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers who are aged either 32 or 33? ", "output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What is the hometown of the youngest teacher? ", "output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Where is the youngest teacher from? ", "output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show different hometown of teachers and the number of teachers from each hometown. ", "output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: For each hometown, how many teachers are there? ", "output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: List the most common hometown of teachers. ", "output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What is the most commmon hometowns for teachers? ", "output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show the hometowns shared by at least two teachers. ", "output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the towns from which at least two teachers come from? ", "output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show names of teachers and the courses they are arranged to teach. ", "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What is the name of each teacher and what course they teach? ", "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. ", "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? ", "output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show the name of the teacher for the math course. ", "output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the people who teach math courses? ", "output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show names of teachers and the number of courses they teach. ", "output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers and how many courses do they teach? ", "output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: Show names of teachers that teach at least two courses. ", "output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers who teach at least two courses? ", "output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: List the names of teachers who have not been arranged to teach courses. ", "output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncourse :\nCourse_ID [ INT ] primary_key\nStaring_Date [ TEXT ]\nCourse [ TEXT ]\n\nteacher :\nTeacher_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ TEXT ]\nHometown [ TEXT ]\n\ncourse_arrange :\nCourse_ID [ INT ] primary_key course_arrange.Course_ID = course.Course_ID\nTeacher_ID [ INT ] course_arrange.Teacher_ID = teacher.Teacher_ID\nGrade [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the teachers whose courses have not been arranged? ", "output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: How many visitors below age 30 are there? ", "output": "SELECT count(*) FROM visitor WHERE age  <  30;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. ", "output": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What is the average age of the visitors whose membership level is not higher than 4? ", "output": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. ", "output": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the id and name of the museum that has the most staff members? ", "output": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the average number of staff working for the museums that were open before 2009. ", "output": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What are the opening year and staff number of the museum named Plaza Museum? ", "output": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. ", "output": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: find the id, name and age for visitors who visited some museums more than once. ", "output": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? ", "output": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What are the id and name of the museum visited most times? ", "output": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the museum that had no visitor yet? ", "output": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the name and age of the visitor who bought the most tickets at once. ", "output": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What are the average and maximum number of tickets bought in all visits? ", "output": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What is the total ticket expense of the visitors whose membership level is 1? ", "output": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? ", "output": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: Find the number of visitors who did not visit any museum opened after 2010. ", "output": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nmuseum :\nMuseum_ID [ INT ] primary_key\nName [ TEXT ]\nNum_of_Staff [ INT ]\nOpen_Year [ TEXT ]\n\nvisitor :\nID [ INT ] primary_key\nName [ TEXT ]\nLevel_of_membership [ INT ]\nAge [ INT ]\n\nvisit :\nMuseum_ID [ INT ] primary_key visit.Museum_ID = museum.Museum_ID\nvisitor_ID [ TEXT ] visit.visitor_ID = visitor.ID\nNum_of_Ticket [ INT ]\nTotal_spent [ INT ]\n\nWrite an SQL query that answers the following: How many museums were opened after 2013 or before 2008? ", "output": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the total number of players. ", "output": "SELECT count(*) FROM players;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many players are there? ", "output": "SELECT count(*) FROM players;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the total number of matches. ", "output": "SELECT count(*) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Count the number of matches. ", "output": "SELECT count(*) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: List the first name and birth date of all players from the country with code USA. ", "output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the first names and birth dates of players from the USA? ", "output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the average age of losers and winners of all matches. ", "output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the average ages of losers and winners across matches? ", "output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the average rank of winners in all matches. ", "output": "SELECT avg(winner_rank) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the average rank for winners in all matches? ", "output": "SELECT avg(winner_rank) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the highest rank of losers in all matches. ", "output": "SELECT min(loser_rank) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the best rank of losers across all matches? ", "output": "SELECT min(loser_rank) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: find the number of distinct country codes of all players. ", "output": "SELECT count(DISTINCT country_code) FROM players;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many distinct countries do players come from? ", "output": "SELECT count(DISTINCT country_code) FROM players;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the number of distinct name of losers. ", "output": "SELECT count(DISTINCT loser_name) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many different loser names are there? ", "output": "SELECT count(DISTINCT loser_name) FROM matches;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the name of tourney that has more than 10 matches. ", "output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the names of tournaments that have more than 10 matches? ", "output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: List the names of all winners who played in both 2013 and 2016. ", "output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the names of players who won in both 2013 and 2016? ", "output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: List the number of all matches who played in years of 2013 or 2016. ", "output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many matches were played in 2013 or 2016? ", "output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? ", "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? ", "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the first name and country code of the oldest player. ", "output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the first name and country code of the oldest player? ", "output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: List the first and last name of all players in the order of birth date. ", "output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the full names of all players, sorted by birth date? ", "output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: List the first and last name of all players who are left / L hand in the order of birth date. ", "output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the full names of all left handed players, in order of birth date? ", "output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the first name and country code of the player who did the most number of tours. ", "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the first name and country code of the player with the most tours? ", "output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the year that has the most number of matches. ", "output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Which year had the most matches? ", "output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the name and rank points of the winner who won the most times. ", "output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? ", "output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. ", "output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? ", "output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: find the names of loser and winner who played in the match with greatest number of minutes. ", "output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the winner and loser who played in the longest match? ", "output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the average ranking for each player and their first name. ", "output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the first names of all players, and their average rankings? ", "output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the total ranking points for each player and their first name. ", "output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the first names of all players, and their total ranking points? ", "output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: find the number of players for each country. ", "output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many players are from each country? ", "output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: find the code of the country where has the greatest number of players. ", "output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the code of the country with the most players? ", "output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the codes of countries that have more than 50 players. ", "output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the codes of countries with more than 50 players? ", "output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the total number of tours for each ranking date. ", "output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many total tours were there for each ranking date? ", "output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the number of matches happened in each year. ", "output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many matches were played in each year? ", "output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the name and rank of the 3 youngest winners across all matches. ", "output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What are the names and ranks of the three youngest winners across all matches? ", "output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many different winners both participated in the WTA Championships and were left handed? ", "output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the number of left handed winners who participated in the WTA Championships. ", "output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. ", "output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? ", "output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: Find the number of players for each hand type. ", "output": "SELECT count(*) ,  hand FROM players GROUP BY hand;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nplayers :\nplayer_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nhand [ TEXT ]\nbirth_date [ TEXT ]\ncountry_code [ TEXT ]\n\nmatches :\nbest_of [ INT ]\ndraw_size [ INT ]\nloser_age [ INT ]\nloser_entry [ TEXT ]\nloser_hand [ TEXT ]\nloser_ht [ INT ]\nloser_id [ INT ] matches.loser_id = players.player_id\nloser_ioc [ TEXT ]\nloser_name [ TEXT ]\nloser_rank [ INT ]\nloser_rank_points [ INT ]\nloser_seed [ INT ]\nmatch_num [ INT ]\nminutes [ INT ]\nround [ TEXT ]\nscore [ TEXT ]\nsurface [ TEXT ]\ntourney_date [ TEXT ]\ntourney_id [ TEXT ]\ntourney_level [ TEXT ]\ntourney_name [ TEXT ]\nwinner_age [ INT ]\nwinner_entry [ TEXT ]\nwinner_hand [ TEXT ]\nwinner_ht [ INT ]\nwinner_id [ INT ] matches.winner_id = players.player_id\nwinner_ioc [ TEXT ]\nwinner_name [ TEXT ]\nwinner_rank [ INT ]\nwinner_rank_points [ INT ]\nwinner_seed [ INT ]\nyear [ INT ]\n\nrankings :\nranking_date [ TEXT ]\nranking [ INT ]\nplayer_id [ INT ] rankings.player_id = players.player_id\nranking_points [ INT ]\ntours [ INT ]\n\nWrite an SQL query that answers the following: How many players are there for each hand type? ", "output": "SELECT count(*) ,  hand FROM players GROUP BY hand;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: How many ships ended up being 'Captured'? ", "output": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: List the name and tonnage ordered by in descending alphaetical order for the names. ", "output": "SELECT name ,  tonnage FROM ship ORDER BY name DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: List the name, date and result of each battle. ", "output": "SELECT name ,  date FROM battle;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What is maximum and minimum death toll caused each time? ", "output": "SELECT max(killed) ,  min(killed) FROM death;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What is the average number of injuries caused each time? ", "output": "SELECT avg(injured) FROM death;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the death and injury situations caused by the ship with tonnage 't'? ", "output": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' ", "output": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? ", "output": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the ids and names of the battles that led to more than 10 people killed in total. ", "output": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What is the ship id and name that caused most total injuries? ", "output": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? ", "output": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: How many different results are there for the battles? ", "output": "SELECT count(DISTINCT RESULT) FROM battle;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: How many battles did not lose any ship with tonnage '225'? ", "output": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' ", "output": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. ", "output": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nbattle :\nid [ INT ] primary_key\nname [ TEXT ]\ndate [ TEXT ]\nbulgarian_commander [ TEXT ]\nlatin_commander [ TEXT ]\nresult [ TEXT ]\n\nship :\nlost_in_battle [ INT ] ship.lost_in_battle = battle.id\nid [ INT ] primary_key\nname [ TEXT ]\ntonnage [ TEXT ]\nship_type [ TEXT ]\nlocation [ TEXT ]\ndisposition_of_ship [ TEXT ]\n\ndeath :\ncaused_by_ship_id [ INT ] death.caused_by_ship_id = ship.id\nid [ INT ] primary_key\nnote [ TEXT ]\nkilled [ INT ]\ninjured [ INT ]\n\nWrite an SQL query that answers the following: What are the notes of the death events which has substring 'East'? ", "output": "SELECT note FROM death WHERE note LIKE '%East%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: what are all the addresses including line 1 and line 2? ", "output": "SELECT line_1 ,  line_2 FROM addresses;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the first and second line for all addresses? ", "output": "SELECT line_1 ,  line_2 FROM addresses;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many courses in total are listed? ", "output": "SELECT count(*) FROM Courses;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many courses are there? ", "output": "SELECT count(*) FROM Courses;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How is the math course described? ", "output": "SELECT course_description FROM Courses WHERE course_name  =  'math';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the descriptions for all the math courses? ", "output": "SELECT course_description FROM Courses WHERE course_name  =  'math';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the zip code of the address in the city Port Chelsea? ", "output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the zip code for Port Chelsea? ", "output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Which department offers the most number of degrees? List department name and id. ", "output": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the name and id of the department with the most number of degrees ? ", "output": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many departments offer any degree? ", "output": "SELECT count(DISTINCT department_id) FROM Degree_Programs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many different departments offer degrees? ", "output": "SELECT count(DISTINCT department_id) FROM Degree_Programs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many different degree names are offered? ", "output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many different degrees are offered? ", "output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many degrees does the engineering department offer? ", "output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many degrees does the engineering department have? ", "output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names and descriptions of all the sections? ", "output": "SELECT section_name ,  section_description FROM Sections;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names and descriptions for all the sections? ", "output": "SELECT section_name ,  section_description FROM Sections;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names and id of courses having at most 2 sections? ", "output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names and ids of every course with less than 2 sections? ", "output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: List the section_name in reversed lexicographical order. ", "output": "SELECT section_name FROM Sections ORDER BY section_name DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names of the sections in reverse alphabetical order? ", "output": "SELECT section_name FROM Sections ORDER BY section_name DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the semester which most student registered in? Show both the name and the id. ", "output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: For each semester, what is the name and id of the one with the most students registered? ", "output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the description of the department whose name has the substring the computer? ", "output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the department description for the one whose name has the word computer? ", "output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. ", "output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? ", "output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. ", "output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? ", "output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Find the kind of program which most number of students are enrolled in? ", "output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the degree summary name that has the most number of students enrolled? ", "output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Find the program which most number of students are enrolled in. List both the id and the summary. ", "output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the program id and the summary of the degree that has the most students enrolled? ", "output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. ", "output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? ", "output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Which semesters do not have any student enrolled? List the semester name. ", "output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the name of the semester with no students enrolled? ", "output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are all the course names of the courses which ever have students enrolled in? ", "output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the names of all courses that have some students enrolled? ", "output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What's the name of the course with most number of enrollments? ", "output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the name of the course with the most students enrolled? ", "output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. ", "output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? ", "output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Show the date and id of the transcript with at least 2 course results. ", "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the date and id of the transcript with at least 2 courses listed? ", "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the phone number of the man with the first name Timmothy and the last name Ward? ", "output": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the mobile phone number of the student named Timmothy Ward ? ", "output": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Who is the first student to register? List the first name, middle name and last name. ", "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the first, middle, and last name of the first student to register? ", "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Who is the earliest graduate of the school? List the first name, middle name and last name. ", "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the first, middle, and last name of the earliest school graduate? ", "output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Whose permanent address is different from his or her current address? List his or her first name. ", "output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the first name of the student whose permanent address is different from his or her current one? ", "output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Which address holds the most number of students currently? List the address id and all lines. ", "output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the id, line 1, and line 2 of the address with the most students? ", "output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: On average, when were the transcripts printed? ", "output": "SELECT avg(transcript_date) FROM Transcripts;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the average transcript date? ", "output": "SELECT avg(transcript_date) FROM Transcripts;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: When is the first transcript released? List the date and details. ", "output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the earliest date of a transcript release, and what details can you tell me? ", "output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many transcripts are released? ", "output": "SELECT count(*) FROM Transcripts;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many transcripts are listed? ", "output": "SELECT count(*) FROM Transcripts;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the last transcript release date? ", "output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: When was the last transcript released? ", "output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. ", "output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? ", "output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Show the date of the transcript which shows the least number of results, also list the id. ", "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the date and id of the transcript with the least number of results? ", "output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Find the semester when both Master students and Bachelor students got enrolled in. ", "output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the id of the semester that had both Masters and Bachelors students enrolled? ", "output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: How many different addresses do the students currently live? ", "output": "SELECT count(DISTINCT current_address_id) FROM Students;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the different addresses that have students living there? ", "output": "SELECT count(DISTINCT current_address_id) FROM Students;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: List all the student details in reversed lexicographical order. ", "output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What other details can you tell me about students in reverse alphabetical order? ", "output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Describe the section h. ", "output": "SELECT section_description FROM Sections WHERE section_name  =  'h';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What is the description for the section named h? ", "output": "SELECT section_description FROM Sections WHERE section_name  =  'h';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . ", "output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAddresses :\naddress_id [ INT ] primary_key\nline_1 [ TEXT ]\nline_2 [ TEXT ]\nline_3 [ TEXT ]\ncity [ TEXT ]\nzip_postcode [ TEXT ]\nstate_province_county [ TEXT ]\ncountry [ TEXT ]\nother_address_details [ TEXT ]\n\nCourses :\ncourse_id [ INT ] primary_key\ncourse_name [ TEXT ]\ncourse_description [ TEXT ]\nother_details [ TEXT ]\n\nDepartments :\ndepartment_id [ INT ] primary_key\ndepartment_name [ TEXT ]\ndepartment_description [ TEXT ]\nother_details [ TEXT ]\n\nDegree_Programs :\ndegree_program_id [ INT ] primary_key\ndepartment_id [ INT ] Degree_Programs.department_id = Departments.department_id\ndegree_summary_name [ TEXT ]\ndegree_summary_description [ TEXT ]\nother_details [ TEXT ]\n\nSections :\nsection_id [ INT ] primary_key\ncourse_id [ INT ] Sections.course_id = Courses.course_id\nsection_name [ TEXT ]\nsection_description [ TEXT ]\nother_details [ TEXT ]\n\nSemesters :\nsemester_id [ INT ] primary_key\nsemester_name [ TEXT ]\nsemester_description [ TEXT ]\nother_details [ TEXT ]\n\nStudents :\nstudent_id [ INT ] primary_key\ncurrent_address_id [ INT ] Students.current_address_id = Addresses.address_id\npermanent_address_id [ INT ] Students.permanent_address_id = Addresses.address_id\nfirst_name [ TEXT ]\nmiddle_name [ TEXT ]\nlast_name [ TEXT ]\ncell_mobile_number [ TEXT ]\nemail_address [ TEXT ]\nssn [ TEXT ]\ndate_first_registered [ TEXT ]\ndate_left [ TEXT ]\nother_student_details [ TEXT ]\n\nStudent_Enrolment :\nstudent_enrolment_id [ INT ] primary_key\ndegree_program_id [ INT ] Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nsemester_id [ INT ] Student_Enrolment.semester_id = Semesters.semester_id\nstudent_id [ INT ] Student_Enrolment.student_id = Students.student_id\nother_details [ TEXT ]\n\nStudent_Enrolment_Courses :\nstudent_course_id [ INT ] primary_key\ncourse_id [ INT ] Student_Enrolment_Courses.course_id = Courses.course_id\nstudent_enrolment_id [ INT ] Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\n\nTranscripts :\ntranscript_id [ INT ] primary_key\ntranscript_date [ TEXT ]\nother_details [ TEXT ]\n\nTranscript_Contents :\nstudent_course_id [ INT ] Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id\ntranscript_id [ INT ] Transcript_Contents.transcript_id = Transcripts.transcript_id\n\nWrite an SQL query that answers the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? ", "output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the title of all cartoons in alphabetical order. ", "output": "SELECT Title FROM Cartoon ORDER BY title;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the titles of the cartoons sorted alphabetically? ", "output": "SELECT Title FROM Cartoon ORDER BY title;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List all cartoon directed by \"Ben Jones\". ", "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the names of all cartoons directed by Ben Jones? ", "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: How many cartoons were written by \"Joseph Kuhr\"? ", "output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the number of cartoones written by Joseph Kuhr? ", "output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: list all cartoon titles and their directors ordered by their air date ", "output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the name and directors of all the cartoons that are ordered by air date? ", "output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". ", "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? ", "output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. ", "output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the country with the most number of TV Channels and how many does it have? ", "output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the number of different series names and contents in the TV Channel table. ", "output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: How many different series and contents are listed in the TV Channel table? ", "output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the content of TV Channel with serial name \"Sky Radio\"? ", "output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the content of the series Sky Radio? ", "output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? ", "output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the Package Options of the TV Channels whose series names are Sky Radio? ", "output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: How many TV Channel using language English? ", "output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: How many TV Channels use the English language? ", "output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the language used least number of TV Channel. List language and number of TV Channel. ", "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the languages used by the least number of TV Channels and how many channels use it? ", "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List each language and the number of TV Channels using it. ", "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: For each language, list the number of TV Channels that use it. ", "output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. ", "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? ", "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". ", "output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? ", "output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the Episode of all TV series sorted by rating. ", "output": "SELECT Episode FROM TV_series ORDER BY rating;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are all of the episodes ordered by ratings? ", "output": "SELECT Episode FROM TV_series ORDER BY rating;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. ", "output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? ", "output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is minimum and maximum share of TV series? ", "output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the maximum and minimum share for the TV series? ", "output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? ", "output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: When did the episode \"A Love of a Lifetime\" air? ", "output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? ", "output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? ", "output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. ", "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? ", "output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". ", "output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the episode for the TV series named \"Sky Radio\"? ", "output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: Find the number of cartoons directed by each of the listed directors. ", "output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: How many cartoons did each director create? ", "output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: Find the production code and channel of the most recently aired cartoon . ", "output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the produdction code and channel of the most recent cartoon ? ", "output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: Find the package choice and series name of the TV channel that has high definition TV. ", "output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? ", "output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: which countries' tv channels are playing some cartoon written by Todd Casey? ", "output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the countries that have cartoons on TV that were written by Todd Casey? ", "output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: which countries' tv channels are not playing any cartoon written by Todd Casey? ", "output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the countries that are not playing cartoons written by Todd Casey? ", "output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? ", "output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? ", "output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: find the pixel aspect ratio and nation of the tv channels that do not use English. ", "output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? ", "output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: find id of the tv channels that from the countries where have more than two tv channels. ", "output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the ids of all tv channels that have more than 2 TV channels? ", "output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. ", "output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? ", "output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. ", "output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nTV_Channel :\nid [ TEXT ] primary_key\nseries_name [ TEXT ]\nCountry [ TEXT ]\nLanguage [ TEXT ]\nContent [ TEXT ]\nPixel_aspect_ratio_PAR [ TEXT ]\nHight_definition_TV [ TEXT ]\nPay_per_view_PPV [ TEXT ]\nPackage_Option [ TEXT ]\n\nTV_series :\nid [ INT ] primary_key\nEpisode [ TEXT ]\nAir_Date [ TEXT ]\nRating [ TEXT ]\nShare [ INT ]\n18_49_Rating_Share [ TEXT ]\nViewers_m [ TEXT ]\nWeekly_Rank [ INT ]\nChannel [ TEXT ] TV_series.Channel = TV_Channel.id\n\nCartoon :\nid [ INT ] primary_key\nTitle [ TEXT ]\nDirected_by [ TEXT ]\nWritten_by [ TEXT ]\nOriginal_air_date [ TEXT ]\nProduction_code [ INT ]\nChannel [ TEXT ] Cartoon.Channel = TV_Channel.id\n\nWrite an SQL query that answers the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? ", "output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: How many poker players are there? ", "output": "SELECT count(*) FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Count the number of poker players. ", "output": "SELECT count(*) FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: List the earnings of poker players in descending order. ", "output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the earnings of poker players, ordered descending by value? ", "output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: List the final tables made and the best finishes of poker players. ", "output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the final tables made and best finishes for all poker players? ", "output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the average earnings of poker players? ", "output": "SELECT avg(Earnings) FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the average earnings across all poker players. ", "output": "SELECT avg(Earnings) FROM poker_player;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the money rank of the poker player with the highest earnings? ", "output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the money rank of the player with the greatest earnings. ", "output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the maximum number of final tables made among poker players with earnings less than 200000? ", "output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the maximum final tables made across all poker players who have earnings below 200000. ", "output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of poker players? ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the names of all the poker players. ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of poker players whose earnings is higher than 300000? ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Give the names of poker players who have earnings above 300000. ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: List the names of poker players ordered by the final tables made in ascending order. ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of poker players, ordered ascending by the number of final tables they have made? ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the birth date of the poker player with the lowest earnings? ", "output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the birth date of the poker player with the lowest earnings. ", "output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the money rank of the tallest poker player? ", "output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the money rank of the poker player with the greatest height. ", "output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the average earnings of poker players with height higher than 200? ", "output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Give average earnings of poker players who are taller than 200. ", "output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of poker players in descending order of earnings? ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the names of poker players sorted by their earnings descending. ", "output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are different nationalities of people and the corresponding number of people from each nation? ", "output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: How many people are there of each nationality? ", "output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What is the most common nationality of people? ", "output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Give the nationality that is most common across all people. ", "output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the nationalities that are shared by at least two people? ", "output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Return the nationalities for which there are two or more people. ", "output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: List the names and birth dates of people in ascending alphabetical order of name. ", "output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names and birth dates of people, ordered by their names in alphabetical order? ", "output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Show names of people whose nationality is not \"Russia\". ", "output": "SELECT Name FROM people WHERE Nationality != \"Russia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of people who are not from Russia? ", "output": "SELECT Name FROM people WHERE Nationality != \"Russia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: List the names of people that are not poker players. ", "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: What are the names of people who do not play poker? ", "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: How many distinct nationalities are there? ", "output": "SELECT count(DISTINCT Nationality) FROM people;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\npoker_player :\nPoker_Player_ID [ INT ] primary_key\nPeople_ID [ INT ] poker_player.People_ID = people.People_ID\nFinal_Table_Made [ INT ]\nBest_Finish [ INT ]\nMoney_Rank [ INT ]\nEarnings [ INT ]\n\npeople :\nPeople_ID [ INT ] primary_key\nNationality [ TEXT ]\nName [ TEXT ]\nBirth_Date [ TEXT ]\nHeight [ INT ]\n\nWrite an SQL query that answers the following: Count the number of different nationalities. ", "output": "SELECT count(DISTINCT Nationality) FROM people;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: How many states are there? ", "output": "SELECT count(*) FROM area_code_state;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: List the contestant numbers and names, ordered by contestant name descending. ", "output": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: List the vote ids, phone numbers and states of all votes. ", "output": "SELECT vote_id ,  phone_number ,  state FROM votes;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the maximum and minimum values of area codes? ", "output": "SELECT max(area_code) ,  min(area_code) FROM area_code_state;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What is last date created of votes from the state 'CA'? ", "output": "SELECT max(created) FROM votes WHERE state  =  'CA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the names of the contestants whose names are not 'Jessie Alloway' ", "output": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the distinct states and create time of all votes? ", "output": "SELECT DISTINCT state ,  created FROM votes;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the contestant numbers and names of the contestants who had at least two votes? ", "output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? ", "output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the number of votes from state 'NY' or 'CA'? ", "output": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: How many contestants did not get voted? ", "output": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What is the area code in which the most voters voted? ", "output": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? ", "output": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. ", "output": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nAREA_CODE_STATE :\narea_code [ INT ] primary_key\nstate [ TEXT ]\n\nCONTESTANTS :\ncontestant_number [ INT ] primary_key\ncontestant_name [ TEXT ]\n\nVOTES :\nvote_id [ INT ] primary_key\nphone_number [ INT ]\nstate [ TEXT ] VOTES.state = AREA_CODE_STATE.state\ncontestant_number [ INT ] VOTES.contestant_number = CONTESTANTS.contestant_number\ncreated [ TEXT ]\n\nWrite an SQL query that answers the following: Return the names of the contestants whose names contain the substring 'Al' . ", "output": "select contestant_name from contestants where contestant_name like \"%al%\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of all the countries that became independent after 1950? ", "output": "SELECT Name FROM country WHERE IndepYear  >  1950;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the names of the nations that were founded after 1950. ", "output": "SELECT Name FROM country WHERE IndepYear  >  1950;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many countries have a republic as their form of government? ", "output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many countries have governments that are republics? ", "output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total surface area of the countries in the Caribbean region? ", "output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How much surface area do the countires in the Carribean cover together? ", "output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which continent is Anguilla in? ", "output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the continent name which Anguilla belongs to? ", "output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which region is the city Kabul located in? ", "output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What region is Kabul in? ", "output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which language is the most popular in Aruba? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What language is predominantly spoken in Aruba? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the population and life expectancies in Brazil? ", "output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give me Brazil\u2019s population and life expectancies. ", "output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the region and population of Angola? ", "output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What region does Angola belong to and what is its population? ", "output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the average expected life expectancy for countries in the region of Central Africa? ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How long is the people\u2019s average life expectancy in Central Africa? ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the name of country that has the shortest life expectancy in Asia? ", "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the name of the country in Asia with the lowest life expectancy. ", "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total population and maximum GNP in Asia? ", "output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many people live in Asia, and what is the largest GNP among them? ", "output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the average life expectancy in African countries that are republics? ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the average life expectancy for countries in Africa which are republics? ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total surface area of the continents Asia and Europe? ", "output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the total surface area covered by countries in Asia or Europe. ", "output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many people live in Gelderland district? ", "output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total population of Gelderland district? ", "output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the average GNP and total population in all nations whose government is US territory? ", "output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the mean GNP and total population of nations which are considered US territory. ", "output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many unique languages are spoken in the world? ", "output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the number of distinct languages used around the world? ", "output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many type of governments are in Africa? ", "output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many different forms of governments are there in Africa? ", "output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total number of languages used in Aruba? ", "output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many languages are spoken in Aruba? ", "output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many official languages does Afghanistan have? ", "output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many official languages are spoken in Afghanistan? ", "output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is name of the country that speaks the largest number of languages? ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the name of the nation that uses the greatest amount of languages. ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which continent has the most diverse languages? ", "output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which continent speaks the most languages? ", "output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many countries speak both English and Dutch? ", "output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the number of nations that use English and Dutch? ", "output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of nations speak both English and French? ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the names of nations that speak both English and French. ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of nations where both English and French are official languages? ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the names of countries with English and French as official languages. ", "output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the number of distinct continents where Chinese is spoken? ", "output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many continents speak Chinese? ", "output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the regions that use English or Dutch? ", "output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which regions speak Dutch or English? ", "output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the countries where either English or Dutch is the official language ? ", "output": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which countries have either English or Dutch as an official language? ", "output": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which language is the most popular on the Asian continent? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the language that is used by the largest number of Asian nations? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which languages are spoken by only one country in republic governments? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What languages are only used by a single country with a republic government? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Find the city with the largest population that uses English. ", "output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the most populace city that speaks English? ", "output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Find the name, population and expected life length of asian country with the largest area? ", "output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the name, population, and life expectancy of the largest Asian country by land? ", "output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is average life expectancy in the countries where English is not the official language? ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the mean life expectancy of countries in which English is not the official language. ", "output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total number of people living in the nations that do not use English? ", "output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many people live in countries that do not speak English? ", "output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the official language spoken in the country whose head of state is Beatrix? ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the official language used in the country the name of whose head of state is Beatrix. ", "output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? ", "output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: For the countries founded before 1930, what is the total number of distinct official languages? ", "output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the countries that have greater surface area than any country in Europe? ", "output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which countries have greater area than that of any country in Europe? ", "output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the African countries that have a  population less than any country in Asia? ", "output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which African countries have a smaller population than that of any country in Asia? ", "output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which Asian countries have a population that is larger than any country in Africa? ", "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the Asian countries which have a population larger than that of any country in Africa? ", "output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\");"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the country codes for countries that do not speak English? ", "output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the country codes for countries that do not speak English. ", "output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the country codes of countries where people use languages other than English? ", "output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the country codes for countries in which people speak langauges that are not English. ", "output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? ", "output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the codes of countries that do not speak English and do not have Republics for governments. ", "output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which cities are in European countries where English is not the official language? ", "output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of cities in Europe for which English is not the official language? ", "output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which unique cities are in Asian countries where Chinese is the official language ? ", "output": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the different names of cities that are in Asia and for which Chinese is the official language. ", "output": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the name, independence year, and surface area of the country with the smallest population? ", "output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the name, year of independence, and surface area of the country that has the lowest population. ", "output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the population, name and leader of the country with the largest area? ", "output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the name, population, and head of state for the country that has the largest area. ", "output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. ", "output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? ", "output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Find the number of cities in each district whose population is greater than the average population of cities? ", "output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: How many cities in each district have a population that is above the average population across all cities? ", "output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. ", "output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? ", "output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? ", "output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? ", "output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names and areas of countries with the top 5 largest area? ", "output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the names and surface areas of the 5 largest countries. ", "output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are names of countries with the top 3 largest population? ", "output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the names of the 3 most populated countries. ", "output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the nations with the 3 lowest populations? ", "output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the names of the 3 countries with the fewest people. ", "output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: how many countries are in Asia? ", "output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Count the number of countries in Asia. ", "output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? ", "output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the names of countries that are in Europe and have a population equal to 80000. ", "output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? ", "output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . ", "output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the cities whose population is between 160000 and 900000? ", "output": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the names of cities that have a population between 160000 and 900000 . ", "output": "select name from city where population between 160000 and 900000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Which language is spoken by the largest number of countries? ", "output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Give the language that is spoken in the most countries. ", "output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the language spoken by the largest percentage of people in each country? ", "output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? ", "output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? ", "output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Count the number of countries for which Spanish is the predominantly spoken language. ", "output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? ", "output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\ncity :\nID [ INT ] primary_key\nName [ TEXT ]\nCountryCode [ TEXT ] city.CountryCode = country.Code\nDistrict [ TEXT ]\nPopulation [ INT ]\n\nsqlite_sequence :\nname [ TEXT ]\nseq [ TEXT ]\n\ncountry :\nCode [ TEXT ] primary_key\nName [ TEXT ]\nContinent [ TEXT ]\nRegion [ TEXT ]\nSurfaceArea [ INT ]\nIndepYear [ INT ]\nPopulation [ INT ]\nLifeExpectancy [ INT ]\nGNP [ INT ]\nGNPOld [ INT ]\nLocalName [ TEXT ]\nGovernmentForm [ TEXT ]\nHeadOfState [ TEXT ]\nCapital [ INT ]\nCode2 [ TEXT ]\n\ncountrylanguage :\nCountryCode [ TEXT ] primary_key countrylanguage.CountryCode = country.Code\nLanguage [ TEXT ]\nIsOfficial [ TEXT ]\nPercentage [ INT ]\n\nWrite an SQL query that answers the following: Return the codes of countries for which Spanish is the predominantly spoken language. ", "output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: How many conductors are there? ", "output": "SELECT count(*) FROM conductor;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Count the number of conductors. ", "output": "SELECT count(*) FROM conductor;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: List the names of conductors in ascending order of age. ", "output": "SELECT Name FROM conductor ORDER BY Age ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors, ordered by age? ", "output": "SELECT Name FROM conductor ORDER BY Age ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors whose nationalities are not \"USA\"? ", "output": "SELECT Name FROM conductor WHERE Nationality != 'USA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Return the names of conductors that do not have the nationality \"USA\". ", "output": "SELECT Name FROM conductor WHERE Nationality != 'USA';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the record companies of orchestras in descending order of years in which they were founded? ", "output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. ", "output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What is the average attendance of shows? ", "output": "SELECT avg(Attendance) FROM SHOW;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Return the average attendance across all shows. ", "output": "SELECT avg(Attendance) FROM SHOW;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the maximum and minimum share of performances whose type is not \"Live final\". ", "output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". ", "output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: How many different nationalities do conductors have? ", "output": "SELECT count(DISTINCT Nationality) FROM conductor;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Count the number of different nationalities of conductors. ", "output": "SELECT count(DISTINCT Nationality) FROM conductor;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: List names of conductors in descending order of years of work. ", "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors, sorted descending by the number of years they have worked? ", "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: List the name of the conductor with the most years of work. ", "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the conductor who has worked the greatest number of years? ", "output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Show the names of conductors and the orchestras they have conducted. ", "output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? ", "output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Show the names of conductors that have conducted more than one orchestras. ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors who have conducted at more than one orchestra? ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Show the name of the conductor that has conducted the most number of orchestras. ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the conductor who has conducted the most orchestras? ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Please show the name of the conductor that has conducted orchestras founded after 2008. ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the names of conductors who have conducted orchestras founded after the year 2008? ", "output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Please show the different record companies and the corresponding number of orchestras. ", "output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: How many orchestras does each record company manage? ", "output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Please show the record formats of orchestras in ascending order of count. ", "output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the major record formats of orchestras, sorted by their frequency? ", "output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: List the record company shared by the most number of orchestras. ", "output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What is the record company used by the greatest number of orchestras? ", "output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: List the names of orchestras that have no performance. ", "output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the orchestras that do not have any performances? ", "output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Show the record companies shared by orchestras founded before 2003 and after 2003. ", "output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? ", "output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". ", "output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Count the number of orchestras that have CD or DVD as their record format. ", "output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: Show the years in which orchestras that have given more than one performance are founded. ", "output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nconductor :\nConductor_ID [ INT ] primary_key\nName [ TEXT ]\nAge [ INT ]\nNationality [ TEXT ]\nYear_of_Work [ INT ]\n\norchestra :\nOrchestra_ID [ INT ] primary_key\nOrchestra [ TEXT ]\nConductor_ID [ INT ] orchestra.Conductor_ID = conductor.Conductor_ID\nRecord_Company [ TEXT ]\nYear_of_Founded [ INT ]\nMajor_Record_Format [ TEXT ]\n\nperformance :\nPerformance_ID [ INT ] primary_key\nOrchestra_ID [ INT ] performance.Orchestra_ID = orchestra.Orchestra_ID\nType [ TEXT ]\nDate [ TEXT ]\nOfficial_ratings_(millions) [ INT ]\nWeekly_rank [ TEXT ]\nShare [ TEXT ]\n\nshow :\nShow_ID [ INT ]\nPerformance_ID [ INT ] show.Performance_ID = performance.Performance_ID\nIf_first_show [ TEXT ]\nResult [ TEXT ]\nAttendance [ INT ]\n\nWrite an SQL query that answers the following: What are years of founding for orchestras that have had more than a single performance? ", "output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many high schoolers are there? ", "output": "SELECT count(*) FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Count the number of high schoolers. ", "output": "SELECT count(*) FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names and grades of each high schooler. ", "output": "SELECT name ,  grade FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names and grades for each high schooler? ", "output": "SELECT name ,  grade FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show all the grades of the high schoolers. ", "output": "SELECT grade FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is the grade of each high schooler? ", "output": "SELECT grade FROM Highschooler;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What grade is Kyle in? ", "output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Return the grade for the high schooler named Kyle. ", "output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of all high schoolers in grade 10. ", "output": "SELECT name FROM Highschooler WHERE grade  =  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of all high schoolers in grade 10? ", "output": "SELECT name FROM Highschooler WHERE grade  =  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the ID of the high schooler named Kyle. ", "output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is Kyle's id? ", "output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many high schoolers are there in grade 9 or 10? ", "output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Count the number of high schoolers in grades 9 or 10. ", "output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the number of high schoolers for each grade. ", "output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many high schoolers are in each grade? ", "output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Which grade has the most high schoolers? ", "output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Return the grade that has the greatest number of high schoolers. ", "output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show me all grades that have at least 4 students. ", "output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Which grades have 4 or more high schoolers? ", "output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the student IDs and numbers of friends corresponding to each. ", "output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many friends does each student have? ", "output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of high school students and their corresponding number of friends. ", "output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of the high schoolers and how many friends does each have? ", "output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is the name of the high schooler who has the greatest number of friends? ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Return the name of the high school student with the most friends. ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of high schoolers who have at least 3 friends. ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of high schoolers who have 3 or more friends? ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of all of the high schooler Kyle's friends. ", "output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Return the names of friends of the high school student Kyle. ", "output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many friends does the high school student Kyle have? ", "output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Count the number of friends Kyle has. ", "output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show ids of all students who do not have any friends. ", "output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the ids of high school students who do not have friends? ", "output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show names of all high school students who do not have any friends. ", "output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of students who have no friends? ", "output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the ids of high schoolers who have friends and are also liked by someone else. ", "output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the ids of students who both have friends and are liked? ", "output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show name of all students who have some friends and also are liked by someone else. ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of high schoolers who both have friends and are liked? ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Count the number of likes for each student id. ", "output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many likes correspond to each student id? ", "output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of high schoolers who have likes, and numbers of likes for each. ", "output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of high schoolers who have likes, and how many likes does each have? ", "output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is the name of the high schooler who has the greatest number of likes? ", "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Give the name of the student with the most likes. ", "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of students who have at least 2 likes. ", "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of students who have 2 or more likes? ", "output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? ", "output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: How many likes does Kyle have? ", "output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Return the number of likes that the high schooler named Kyle has. ", "output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Find the average grade of all students who have some friends. ", "output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is the average grade of students who have friends? ", "output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: Find the minimum grade of students who have no friends. ", "output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nHighschooler :\nID [ INT ] primary_key\nname [ TEXT ]\ngrade [ INT ]\n\nFriend :\nstudent_id [ INT ] primary_key Friend.student_id = Highschooler.ID\nfriend_id [ INT ] Friend.friend_id = Highschooler.ID\n\nLikes :\nstudent_id [ INT ] primary_key Likes.student_id = Highschooler.ID\nliked_id [ INT ] Likes.liked_id = Highschooler.ID\n\nWrite an SQL query that answers the following: What is the lowest grade of students who do not have any friends? ", "output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which states have both owners and professionals living there? ", "output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the states where both owners and professionals live. ", "output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the average age of the dogs who have gone through any treatments? ", "output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the average age of the dogs who went through treatments. ", "output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. ", "output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. ", "output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . ", "output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? ", "output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which first names are used for professionals or owners but are not used as dog names? ", "output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the first names that are used for professionals or owners but are not used as dog names. ", "output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. ", "output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. ", "output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which owner owns the most dogs? List the owner id, first name and last name. ", "output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Return the owner id, first name and last name of the owner who has the most dogs. ", "output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. ", "output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the id, role, and first name of the professionals who have performed two or more treatments? ", "output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the breed with the most dogs? ", "output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which breed do the most dogs have? Give me the breed name. ", "output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. ", "output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. ", "output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the description of the treatment type that costs the least money in total? ", "output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Give me the description of the treatment type whose total cost is the lowest. ", "output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. ", "output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. ", "output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. ", "output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the id and cell phone of the professionals who operate two or more types of treatments. ", "output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the first name and last name of the professionals who have done treatment with cost below average? ", "output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. ", "output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the date of each treatment, together with the first name of the professional who operated it. ", "output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the date and the operating professional's first name of each treatment? ", "output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the cost of each treatment and the corresponding treatment type description. ", "output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the cost and treatment type description of each treatment? ", "output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List each owner's first name, last name, and the size of his for her dog. ", "output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are each owner's first name, last name, and the size of their dog? ", "output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List pairs of the owner's first name and the dogs's name. ", "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are each owner's first name and their dogs's name? ", "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the names of the dogs of the rarest breed and the treatment dates of them. ", "output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which dogs are of the rarest breed? Show their names and treatment dates. ", "output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. ", "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the first names of owners living in Virginia and the names of dogs they own. ", "output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? ", "output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the arriving date and the departing date of the dogs that received a treatment. ", "output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the last name of the owner owning the youngest dog. ", "output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Who owns the youngest dog? Give me his or her last name. ", "output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. ", "output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? ", "output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the arriving date and the departing date of all the dogs? ", "output": "SELECT date_arrived ,  date_departed FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the arrival date and the departure date for all the dogs. ", "output": "SELECT date_arrived ,  date_departed FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many dogs went through any treatments? ", "output": "SELECT count(DISTINCT dog_id) FROM Treatments;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Count the number of dogs that went through a treatment. ", "output": "SELECT count(DISTINCT dog_id) FROM Treatments;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many professionals have performed any treatment to dogs? ", "output": "SELECT count(DISTINCT professional_id) FROM Treatments;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the number of professionals who have ever treated dogs. ", "output": "SELECT count(DISTINCT professional_id) FROM Treatments;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. ", "output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. ", "output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. ", "output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. ", "output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many dogs have an age below the average? ", "output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Count the number of dogs of an age below the average. ", "output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How much does the most recent treatment cost? ", "output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Show me the cost of the most recently performed treatment. ", "output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many dogs have not gone through any treatment? ", "output": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Tell me the number of dogs that have not received any treatment . ", "output": "select count(*) from dogs where dog_id not in ( select dog_id from treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many owners temporarily do not have any dogs? ", "output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the number of owners who do not own any dogs at this moment. ", "output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How many professionals did not operate any treatment on dogs? ", "output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the number of professionals who have not treated any dogs. ", "output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. ", "output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. ", "output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the average age of all the dogs? ", "output": "SELECT avg(age) FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Compute the average age of all the dogs. ", "output": "SELECT avg(age) FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the age of the oldest dog? ", "output": "SELECT max(age) FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Tell me the age of the oldest dog. ", "output": "SELECT max(age) FROM Dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How much does each charge type costs? List both charge type and amount. ", "output": "SELECT charge_type ,  charge_amount FROM Charges;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List each charge type and its amount. ", "output": "SELECT charge_type ,  charge_amount FROM Charges;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: How much does the most expensive charge type costs? ", "output": "SELECT max(charge_amount) FROM Charges;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What is the charge amount of the most expensive charge type? ", "output": "SELECT max(charge_amount) FROM Charges;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the email, cell phone and home phone of all the professionals. ", "output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are the email, cell phone and home phone of each professional? ", "output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are all the possible breed type and size type combinations? ", "output": "SELECT DISTINCT breed_code ,  size_code FROM dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: Find the distinct breed type and size type combinations for dogs. ", "output": "SELECT DISTINCT breed_code ,  size_code FROM dogs;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: List the first name of all the professionals along with the description of the treatment they have done. ", "output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nBreeds :\nbreed_code [ TEXT ] primary_key\nbreed_name [ TEXT ]\n\nCharges :\ncharge_id [ INT ] primary_key\ncharge_type [ TEXT ]\ncharge_amount [ INT ]\n\nSizes :\nsize_code [ TEXT ] primary_key\nsize_description [ TEXT ]\n\nTreatment_Types :\ntreatment_type_code [ TEXT ] primary_key\ntreatment_type_description [ TEXT ]\n\nOwners :\nowner_id [ INT ] primary_key\nfirst_name [ TEXT ]\nlast_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nDogs :\ndog_id [ INT ] primary_key\nowner_id [ INT ] Dogs.owner_id = Owners.owner_id\nabandoned_yn [ TEXT ]\nbreed_code [ TEXT ] Dogs.breed_code = Breeds.breed_code\nsize_code [ TEXT ] Dogs.size_code = Sizes.size_code\nname [ TEXT ]\nage [ TEXT ]\ndate_of_birth [ TEXT ]\ngender [ TEXT ]\nweight [ TEXT ]\ndate_arrived [ TEXT ]\ndate_adopted [ TEXT ]\ndate_departed [ TEXT ]\n\nProfessionals :\nprofessional_id [ INT ] primary_key\nrole_code [ TEXT ]\nfirst_name [ TEXT ]\nstreet [ TEXT ]\ncity [ TEXT ]\nstate [ TEXT ]\nzip_code [ TEXT ]\nlast_name [ TEXT ]\nemail_address [ TEXT ]\nhome_phone [ TEXT ]\ncell_number [ TEXT ]\n\nTreatments :\ntreatment_id [ INT ] primary_key\ndog_id [ INT ] Treatments.dog_id = Dogs.dog_id\nprofessional_id [ INT ] Treatments.professional_id = Professionals.professional_id\ntreatment_type_code [ TEXT ] Treatments.treatment_type_code = Treatment_Types.treatment_type_code\ndate_of_treatment [ TEXT ]\ncost_of_treatment [ INT ]\n\nWrite an SQL query that answers the following: What are each professional's first name and description of the treatment they have performed? ", "output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: How many singers are there? ", "output": "SELECT count(*) FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What is the count of singers? ", "output": "SELECT count(*) FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: List the name of singers in ascending order of net worth. ", "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the names of singers ordered by ascending net worth? ", "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the birth year and citizenship of singers? ", "output": "SELECT Birth_Year ,  Citizenship FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the birth years and citizenships of the singers? ", "output": "SELECT Birth_Year ,  Citizenship FROM singer;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: List the name of singers whose citizenship is not \"France\". ", "output": "SELECT Name FROM singer WHERE Citizenship != \"France\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the singers who are not French citizens? ", "output": "SELECT Name FROM singer WHERE Citizenship != \"France\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show the name of singers whose birth year is either 1948 or 1949? ", "output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the singers whose birth years are either 1948 or 1949? ", "output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the singer with the largest net worth? ", "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What is the name of the singer who is worth the most? ", "output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show different citizenship of singers and the number of singers of each citizenship. ", "output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: For each citizenship, how many singers are from that country? ", "output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Please show the most common citizenship of singers. ", "output": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What is the most common singer citizenship ? ", "output": "select citizenship from singer group by citizenship order by count(*) desc limit 1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show different citizenships and the maximum net worth of singers of each citizenship. ", "output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: For each citizenship, what is the maximum net worth? ", "output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show titles of songs and names of singers. ", "output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the song titles and singer names? ", "output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show distinct names of singers that have songs with sales more than 300000. ", "output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: what are the different names of the singers that have sales more than 300000? ", "output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show the names of singers that have more than one song. ", "output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the names of the singers that have more than one songs? ", "output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show the names of singers and the total sales of their songs. ", "output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: For each singer name, what is the total sales for their songs? ", "output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: List the name of singers that do not have any song. ", "output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What is the sname of every sing that does not have any song? ", "output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. ", "output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nsinger :\nSinger_ID [ INT ] primary_key\nName [ TEXT ]\nBirth_Year [ INT ]\nNet_Worth_Millions [ INT ]\nCitizenship [ TEXT ]\n\nsong :\nSong_ID [ INT ] primary_key\nTitle [ TEXT ]\nSinger_ID [ INT ] song.Singer_ID = singer.Singer_ID\nSales [ INT ]\nHighest_Position [ INT ]\n\nWrite an SQL query that answers the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? ", "output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Feature_Types :\nfeature_type_code [ TEXT ] primary_key\nfeature_type_name [ TEXT ]\n\nRef_Property_Types :\nproperty_type_code [ TEXT ] primary_key\nproperty_type_description [ TEXT ]\n\nOther_Available_Features :\nfeature_id [ INT ] primary_key\nfeature_type_code [ TEXT ] Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code\nfeature_name [ TEXT ]\nfeature_description [ TEXT ]\n\nProperties :\nproperty_id [ INT ] primary_key\nproperty_type_code [ TEXT ] Properties.property_type_code = Ref_Property_Types.property_type_code\ndate_on_market [ TEXT ]\ndate_sold [ TEXT ]\nproperty_name [ TEXT ]\nproperty_address [ TEXT ]\nroom_count [ INT ]\nvendor_requested_price [ INT ]\nbuyer_offered_price [ INT ]\nagreed_selling_price [ INT ]\napt_feature_1 [ TEXT ]\napt_feature_2 [ TEXT ]\napt_feature_3 [ TEXT ]\nfld_feature_1 [ TEXT ]\nfld_feature_2 [ TEXT ]\nfld_feature_3 [ TEXT ]\nhse_feature_1 [ TEXT ]\nhse_feature_2 [ TEXT ]\nhse_feature_3 [ TEXT ]\noth_feature_1 [ TEXT ]\noth_feature_2 [ TEXT ]\noth_feature_3 [ TEXT ]\nshp_feature_1 [ TEXT ]\nshp_feature_2 [ TEXT ]\nshp_feature_3 [ TEXT ]\nother_property_details [ TEXT ]\n\nOther_Property_Features :\nproperty_id [ INT ] Other_Property_Features.property_id = Properties.property_id\nfeature_id [ INT ] Other_Property_Features.feature_id = Other_Available_Features.feature_id\nproperty_feature_description [ TEXT ]\n\nWrite an SQL query that answers the following: How many available features are there in total? ", "output": "SELECT count(*) FROM Other_Available_Features;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Feature_Types :\nfeature_type_code [ TEXT ] primary_key\nfeature_type_name [ TEXT ]\n\nRef_Property_Types :\nproperty_type_code [ TEXT ] primary_key\nproperty_type_description [ TEXT ]\n\nOther_Available_Features :\nfeature_id [ INT ] primary_key\nfeature_type_code [ TEXT ] Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code\nfeature_name [ TEXT ]\nfeature_description [ TEXT ]\n\nProperties :\nproperty_id [ INT ] primary_key\nproperty_type_code [ TEXT ] Properties.property_type_code = Ref_Property_Types.property_type_code\ndate_on_market [ TEXT ]\ndate_sold [ TEXT ]\nproperty_name [ TEXT ]\nproperty_address [ TEXT ]\nroom_count [ INT ]\nvendor_requested_price [ INT ]\nbuyer_offered_price [ INT ]\nagreed_selling_price [ INT ]\napt_feature_1 [ TEXT ]\napt_feature_2 [ TEXT ]\napt_feature_3 [ TEXT ]\nfld_feature_1 [ TEXT ]\nfld_feature_2 [ TEXT ]\nfld_feature_3 [ TEXT ]\nhse_feature_1 [ TEXT ]\nhse_feature_2 [ TEXT ]\nhse_feature_3 [ TEXT ]\noth_feature_1 [ TEXT ]\noth_feature_2 [ TEXT ]\noth_feature_3 [ TEXT ]\nshp_feature_1 [ TEXT ]\nshp_feature_2 [ TEXT ]\nshp_feature_3 [ TEXT ]\nother_property_details [ TEXT ]\n\nOther_Property_Features :\nproperty_id [ INT ] Other_Property_Features.property_id = Properties.property_id\nfeature_id [ INT ] Other_Property_Features.feature_id = Other_Available_Features.feature_id\nproperty_feature_description [ TEXT ]\n\nWrite an SQL query that answers the following: What is the feature type name of feature AirCon? ", "output": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\";"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Feature_Types :\nfeature_type_code [ TEXT ] primary_key\nfeature_type_name [ TEXT ]\n\nRef_Property_Types :\nproperty_type_code [ TEXT ] primary_key\nproperty_type_description [ TEXT ]\n\nOther_Available_Features :\nfeature_id [ INT ] primary_key\nfeature_type_code [ TEXT ] Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code\nfeature_name [ TEXT ]\nfeature_description [ TEXT ]\n\nProperties :\nproperty_id [ INT ] primary_key\nproperty_type_code [ TEXT ] Properties.property_type_code = Ref_Property_Types.property_type_code\ndate_on_market [ TEXT ]\ndate_sold [ TEXT ]\nproperty_name [ TEXT ]\nproperty_address [ TEXT ]\nroom_count [ INT ]\nvendor_requested_price [ INT ]\nbuyer_offered_price [ INT ]\nagreed_selling_price [ INT ]\napt_feature_1 [ TEXT ]\napt_feature_2 [ TEXT ]\napt_feature_3 [ TEXT ]\nfld_feature_1 [ TEXT ]\nfld_feature_2 [ TEXT ]\nfld_feature_3 [ TEXT ]\nhse_feature_1 [ TEXT ]\nhse_feature_2 [ TEXT ]\nhse_feature_3 [ TEXT ]\noth_feature_1 [ TEXT ]\noth_feature_2 [ TEXT ]\noth_feature_3 [ TEXT ]\nshp_feature_1 [ TEXT ]\nshp_feature_2 [ TEXT ]\nshp_feature_3 [ TEXT ]\nother_property_details [ TEXT ]\n\nOther_Property_Features :\nproperty_id [ INT ] Other_Property_Features.property_id = Properties.property_id\nfeature_id [ INT ] Other_Property_Features.feature_id = Other_Available_Features.feature_id\nproperty_feature_description [ TEXT ]\n\nWrite an SQL query that answers the following: Show the property type descriptions of properties belonging to that code. ", "output": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code;"}, {"input": "You are a powerful text-to-SQL model. Here is a database schema:\nRef_Feature_Types :\nfeature_type_code [ TEXT ] primary_key\nfeature_type_name [ TEXT ]\n\nRef_Property_Types :\nproperty_type_code [ TEXT ] primary_key\nproperty_type_description [ TEXT ]\n\nOther_Available_Features :\nfeature_id [ INT ] primary_key\nfeature_type_code [ TEXT ] Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code\nfeature_name [ TEXT ]\nfeature_description [ TEXT ]\n\nProperties :\nproperty_id [ INT ] primary_key\nproperty_type_code [ TEXT ] Properties.property_type_code = Ref_Property_Types.property_type_code\ndate_on_market [ TEXT ]\ndate_sold [ TEXT ]\nproperty_name [ TEXT ]\nproperty_address [ TEXT ]\nroom_count [ INT ]\nvendor_requested_price [ INT ]\nbuyer_offered_price [ INT ]\nagreed_selling_price [ INT ]\napt_feature_1 [ TEXT ]\napt_feature_2 [ TEXT ]\napt_feature_3 [ TEXT ]\nfld_feature_1 [ TEXT ]\nfld_feature_2 [ TEXT ]\nfld_feature_3 [ TEXT ]\nhse_feature_1 [ TEXT ]\nhse_feature_2 [ TEXT ]\nhse_feature_3 [ TEXT ]\noth_feature_1 [ TEXT ]\noth_feature_2 [ TEXT ]\noth_feature_3 [ TEXT ]\nshp_feature_1 [ TEXT ]\nshp_feature_2 [ TEXT ]\nshp_feature_3 [ TEXT ]\nother_property_details [ TEXT ]\n\nOther_Property_Features :\nproperty_id [ INT ] Other_Property_Features.property_id = Properties.property_id\nfeature_id [ INT ] Other_Property_Features.feature_id = Other_Available_Features.feature_id\nproperty_feature_description [ TEXT ]\n\nWrite an SQL query that answers the following: What are the names of properties that are either houses or apartments with more than 1 room? ", "output": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1;"}]