SELECT COUNT(*) FROM singer 
SELECT name, country, age FROM singer ORDER BY age DESC 
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France' 
SELECT song_name, song_release_year FROM singer ORDER BY age LIMIT 1 
SELECT DISTINCT country FROM singer WHERE age > 20 
SELECT country, COUNT(*) FROM singer GROUP BY country 
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer) 
SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 
SELECT MAX(average), AVG(capacity) FROM stadium 
SELECT AVG(capacity), MAX(capacity) FROM stadium 
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1 
SELECT COUNT(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015 
SELECT T1.name, COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id 
SELECT T1.name, T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year >= 2014 GROUP BY T1.stadium_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.name, T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year > 2013 GROUP BY T1.stadium_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT name FROM stadium WHERE NOT stadium_id IN (SELECT stadium_id FROM concert) 
SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30 
SELECT name FROM stadium WHERE NOT stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014) 
SELECT T1.concert_name, T1.theme, COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.concert_name, T1.theme 
SELECT T1.concert_name, T1.theme, COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.concert_name, T1.theme 
SELECT T1.name, COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name 
SELECT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T3.year = 2014 
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%' 
SELECT T1.name, T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.Year = 2014 INTERSECT SELECT T1.name, T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.Year = 2015
SELECT COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id ORDER BY T2.capacity DESC LIMIT 1 
SELECT COUNT(*) FROM pets WHERE weight > 10 
SELECT weight FROM pets ORDER BY pet_age LIMIT 1 
SELECT MAX(weight), petType FROM pets GROUP BY petType 
SELECT COUNT(*) FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20 
SELECT COUNT(*) FROM has_pet AS T1 JOIN pets AS T2 ON T1.petid = T2.petid JOIN student AS T3 ON T1.stuid = T3.stuid WHERE T2.pettype = "dog" AND T3.sex = "F" 
SELECT COUNT(DISTINCT pettype) FROM pets 
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = "cat" OR T3.pettype = "dog" 
SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = "cat" INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON
SELECT T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = "cat" 
SELECT T1.stuid FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid = T2.stuid LEFT JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype <> 'cat' 
SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = "dog" EXCEPT SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.
SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1 
SELECT petid, weight FROM pets WHERE pet_age > 1 
SELECT AVG(pet_age), MAX(pet_age), pettype FROM pets GROUP BY pettype 
SELECT AVG(weight), pettype FROM pets GROUP BY pettype 
SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid 
SELECT T1.petid FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.Lname = 'Smith' 
SELECT COUNT(*), T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid 
SELECT COUNT(*), T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid 
SELECT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T2.stuid HAVING COUNT(*) > 1 
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet_age = 3 AND T3.pettype = "cat" 
SELECT AVG(T1.age) FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.stuid IS NULL 
SELECT COUNT(*) FROM CONTINENTS 
SELECT T1.ContId, T1.Continent, COUNT(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId 
SELECT COUNT(*) FROM COUNTRIES 
SELECT T1.FullName, T1.Id, COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id 
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower LIMIT 1 
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(T3.Weight) FROM CARS_DATA AS T3) 
SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN CARS_DATA AS T2 ON T1.Id = T2.id JOIN MODEL_LIST AS T3 ON T3.model = T2.model JOIN CAR_NAMES AS T4 ON T4.MakeId = T1.Id WHERE T2.year = 1970 
SELECT T1.Make, T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Year LIMIT 1 
SELECT DISTINCT T1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T1.MakeId = T3.id WHERE T3.year > 1980 
SELECT COUNT(DISTINCT T1.CountryId), T2.Continent FROM car_makers AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId JOIN CONTINENTS AS T3 ON T2.ContId = T3.ContId GROUP BY T3.Continent 
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT COUNT(*), T2.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T2.fullname 
SELECT COUNT(*), T1.Id, T1.FullName FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.FullName GROUP BY T1.Id 
SELECT T1.Accelerate FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = "amc" AND T1.Model = "hornet" AND T1.Model = "sportabout" AND T1.Model = "sw" 
SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = "France" 
SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId JOIN MODEL_LIST AS T3 ON T3.Maker = T1.Id WHERE T2.CountryName = "USA" 
SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = 4 
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974 
SELECT DISTINCT Maker, Model FROM MODEL_LIST 
SELECT T1.CountryName, T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.Country = T2.Country 
SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150 
SELECT AVG(Weight), YEAR FROM CARS_DATA GROUP BY YEAR 
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.CountryId = T2.ContId WHERE T2.Continent = 'Europe' INTERSECT SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country INTERSECT SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN
SELECT T1.Make, MAX(T2.horsepower) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 GROUP BY T1.Make 
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model ORDER BY MAX(T2.mpg) DESC LIMIT 1 
SELECT T1.model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.mpg DESC LIMIT 1 
SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980 
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980 
SELECT AVG(T1.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = "volvo" 
SELECT MAX(Accelerate), Cylinders FROM CARS_DATA GROUP BY Cylinders 
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1 
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 4 
SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = 1980 
SELECT COUNT(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "American Motor Company" 
SELECT T1.FullName, T2.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Maker = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3 
SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CAR_MAKERS AS T2 ON T1.MakeId = T2.Id JOIN CARS_DATA AS T3 ON T1.Model = T3.Id WHERE T2.FullName = "General Motors" OR T3.weight > 3500 
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 
SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1 
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = "volvo" ORDER BY T1.accelerate LIMIT 1 
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT MAX(Accelerate) FROM CARS_DATA) 
SELECT COUNT(*) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE COUNT(*) > 2 
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6 
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1 
SELECT T1.MakeId, T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND T1.Cylinders NOT IN (SELECT T1.Cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T
SELECT T1.makeid, T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.horsepower < 4 AND T2.cylinders < 4 
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980 
SELECT T1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MakeId = T2.Maker JOIN CARS_DATA AS T3 ON T2.Model = T3.Id WHERE T3.weight < 3500 EXCEPT SELECT T1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.MakeId = T2
SELECT T1.CountryName FROM countries AS T1 LEFT JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country WHERE T2.Country IS NULL 
SELECT T1.id, T1.maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.maker = T2.maker JOIN car_names AS T3 ON T2.model = T3.model GROUP BY T1.id HAVING COUNT(*) >= 2 AND COUNT(*) <= 3 
SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Maker = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING COUNT(*) >= 2 AND SUM(T3.model) >= 3 
SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat' OR COUNT(*) > 3 
SELECT T1.countryid, T1.countryname FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country JOIN model_list AS T3 ON T2.id = T3.maker WHERE T3.model = "fiat" OR COUNT(*) > 3 
SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways" 
SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways" 
SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = "USA" 
SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = 'Anthony' 
SELECT COUNT(*) FROM airlines 
SELECT COUNT(*) FROM AIRLINES 
SELECT COUNT(*) FROM AIRPORTS 
SELECT COUNT(*) FROM Flight 
SELECT COUNT(*) FROM FLIGHTS 
SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL' 
SELECT COUNT(*) FROM AIRLINES WHERE Country = "USA" 
SELECT City, Country FROM AIRPORTS WHERE AirportName = 'Alton' 
SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO' 
SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen' 
SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = 'APG' 
SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = 'ATO' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.DestAirport = 'ASY' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD' 
SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T1.Airline = T3.uid WHERE T3.Airline = 'United Airlines' AND T2.City = 'Aberdeen' 
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) LIMIT 1 
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY COUNT(*) LIMIT 1 
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD' 
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD' 
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport =
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = '
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING COUNT(*) >= 10 
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200 
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United Airlines" 
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG" 
SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "APG" 
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen" 
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen" 
SELECT COUNT(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene' 
SELECT T1.AirportName FROM Airports AS T1 LEFT JOIN Flights AS T2 ON T1.AirportCode = T2.AirportCode WHERE T2.AirportCode IS NULL 
SELECT COUNT(*) FROM Employee 
SELECT COUNT(*) FROM employee 
SELECT name FROM employee ORDER BY age 
SELECT COUNT(*), city FROM employee GROUP BY city 
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1 
SELECT LOCATION, COUNT(*) FROM shop GROUP BY LOCATION 
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1 
SELECT MIN(Number_products), MAX(Number_products) FROM shop 
SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC 
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop) 
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.bonus = (SELECT MAX(T3.bonus) FROM evaluation AS T3) 
SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE NOT T2.name IN (SELECT T3.name FROM employee AS T3 JOIN evaluation AS T4 ON T3.Employee_ID = T4.Employee_ID WHERE T4.name = T2.name) 
SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.shop_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT name FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM hiring) 
SELECT COUNT(*), T1.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id 
SELECT SUM(bonus) FROM evaluation 
SELECT * FROM hiring 
SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000 
SELECT COUNT(DISTINCT LOCATION) FROM shop 
SELECT COUNT(*) FROM Documents 
SELECT document_id, document_name, document_description FROM Documents 
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%' 
SELECT document_id, template_id, Document_Description FROM Documents WHERE document_name = "Robbin CV" 
SELECT COUNT(DISTINCT template_id) FROM Documents 
SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT' 
SELECT template_id, COUNT(*) FROM Documents GROUP BY template_id 
SELECT T1.Template_Type_Code, T1.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1 
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents 
SELECT COUNT(*) FROM Templates 
SELECT template_id, version_number, template_type_code FROM Templates 
SELECT DISTINCT template_type_code FROM Templates 
SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT' 
SELECT COUNT(*) FROM Templates WHERE template_type_code = 'CV' 
SELECT version_number, template_type_code FROM Templates WHERE version_number > 5 
SELECT template_type_code, COUNT(*) FROM Templates GROUP BY template_type_code 
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) < 3 
SELECT template_type_code, MIN(Version_Number) FROM Templates GROUP BY template_type_code 
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = "Data base" 
SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'BK' 
SELECT T1.template_type_code, COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code 
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT template_type_code FROM Templates WHERE NOT template_id IN (SELECT template_id FROM Documents) 
SELECT template_type_code, template_type_description FROM Ref_template_types 
SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD" 
SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book" 
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID 
SELECT T1.template_id FROM Templates AS T1 JOIN Ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = "Presentation" 
SELECT COUNT(*) FROM Paragraphs 
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show' 
SELECT other_details FROM paragraphs WHERE paragraph_text = 'Korea ' 
SELECT T1.paragraph_id, T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY' 
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Customer reviews" 
SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id 
SELECT T1.document_id, T1.document_name, COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id 
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2 
SELECT T1.document_name, T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1 
SELECT document_id FROM Paragraphs WHERE paragraph_id BETWEEN 1 AND 2 
SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland' 
SELECT COUNT(*) FROM teacher 
SELECT Name FROM teacher ORDER BY Age 
SELECT Age, Hometown FROM teacher 
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District' 
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33 
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1 
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown 
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2 
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID 
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name 
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math' 
SELECT T1.Name, COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name 
SELECT Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(*) >= 2 
SELECT Name FROM teacher WHERE NOT Teacher_id IN (SELECT Teacher_id FROM course_arrange) 
SELECT COUNT(*) FROM visitor WHERE age < 30 
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC 
SELECT AVG(age) FROM visitor WHERE Level_of_membership <= 4 
SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age 
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1 
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009 
SELECT Num_of_Staff, Open_Year FROM museum WHERE name = "Plaza Museum" 
SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010) 
SELECT T1.id, T1.name, T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING COUNT(*) > 1 
SELECT T1.id, T2.name, T2.Level_of_membership FROM visitor AS T2 JOIN visit AS T1 ON T1.visitor_id = T2.id GROUP BY T1.visitor_id ORDER BY SUM(T1.Total_spent) DESC LIMIT 1 
SELECT T1.Museum_ID, T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.name FROM museum AS T1 LEFT JOIN visit AS T2 ON T1.Museum_ID = T2.museum_id WHERE T2.museum_id IS NULL 
SELECT T1.name, T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.num_of_ticket ORDER BY COUNT(*) DESC LIMIT 1 
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit 
SELECT SUM(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_id = T2.id WHERE T2.Level_of_membership = 1 
SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON
SELECT COUNT(*) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.open_year < 2010 
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008 
SELECT COUNT(*) FROM players 
SELECT COUNT(*) FROM player 
SELECT COUNT(*) FROM matches 
SELECT first_name, birth_date FROM players WHERE country_code = "USA" 
SELECT AVG(loser_age), AVG(winner_age) FROM matches 
SELECT AVG(winner_rank) FROM matches 
SELECT MAX(loser_rank) FROM matches 
SELECT COUNT(DISTINCT country_code) FROM players 
SELECT COUNT(DISTINCT loser_name) FROM matches 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10 
SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016 
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016 
SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = "WTA Championships" INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1 
SELECT first_name, last_name FROM players ORDER BY birth_date 
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date 
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY SUM(T2.tours) DESC LIMIT 1 
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1 
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1 
SELECT winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1 
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1 
SELECT AVG(t2.ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name 
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id 
SELECT COUNT(*), country_code FROM players GROUP BY country_code 
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50 
SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date 
SELECT YEAR, COUNT(*) FROM matches GROUP BY YEAR 
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3 
SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = "WTA Championships" AND winner_hand = "Left" 
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) 
SELECT hand, COUNT(*) FROM players GROUP BY hand 
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured' 
SELECT name, tonnage FROM ship ORDER BY name DESC 
SELECT name, date FROM battle 
SELECT MAX(killed), MIN(killed) FROM death 
SELECT AVG(injured) FROM death 
SELECT killed, injured FROM death WHERE caused_by_ship_id = (SELECT Id FROM ship WHERE tonnage = 't') 
SELECT name, RESULT FROM battle WHERE bulgarian_commander <> 'Boril' 
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.lost_in_battle = T2.id WHERE T2.ship_type = 'Brig' 
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T3.killed > 10 
SELECT T1.Id, T2.ship_name FROM ship AS T1 JOIN death AS T2 ON T1.Id = T2.caused_by_ship_id GROUP BY T1.Id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' 
SELECT COUNT(DISTINCT RESULT) FROM battle 
SELECT COUNT(*) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T1.tonnage = 225 AND T2.lost_in_battle = 0 
SELECT T1.name, T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T1.name = 'Lettice' INTERSECT SELECT T1.name, T2.date FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T1.name = 'HMS Atalanta' 
SELECT T1.name, T1.RESULT, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' 
SELECT note FROM death WHERE note LIKE '%East%' 
SELECT line_1, line_2 FROM addresses 
SELECT COUNT(*) FROM COURSES 
SELECT COUNT(*) FROM Courses 
SELECT course_description FROM Courses WHERE course_name = 'Math' 
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' 
SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.department_name, T1.department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs 
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs 
SELECT COUNT(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering' 
SELECT section_name, section_description FROM Sections 
SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) <= 2 
SELECT section_name FROM Sections ORDER BY section_name DESC 
SELECT T1.semester_name, T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%' 
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE degree_id = 2 
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor' 
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.semester_id IS NULL 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id 
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id 
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2 
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward" 
SELECT cell_mobile_number FROM students WHERE first_name = "Timmothy" AND last_name = "Ward" 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left LIMIT 1 
SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id 
SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT AVG(transcript_date) FROM Transcripts 
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1 
SELECT COUNT(*) FROM Transcripts 
SELECT MAX(transcript_date) FROM Transcripts 
SELECT COUNT(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id 
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) LIMIT 1 
SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_program_id = 'Master' INTERSECT SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program
SELECT COUNT(DISTINCT current_address_id) FROM Students 
SELECT other_student_details FROM Students ORDER BY other_student_details DESC 
SELECT section_description FROM Sections WHERE section_name = 'h' 
SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = "Haiti" OR T1.cell_mobile_number = "09700166582" 
SELECT Title FROM Cartoon ORDER BY title 
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" 
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr" 
SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date 
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti" 
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1 
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel 
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio" 
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio" 
SELECT COUNT(*) FROM TV_Channel WHERE LANGUAGE = 'English' 
SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(*) LIMIT 1 
SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE 
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!" 
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio" 
SELECT Episode FROM TV_series ORDER BY rating 
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 
SELECT MIN(SHARE), MAX(SHARE) FROM TV_series 
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime" 
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime" 
SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = "A Love of a Lifetime" 
SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio" 
SELECT COUNT(*), Directed_by FROM cartoon GROUP BY Directed_by 
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1 
SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = 1 
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = "Todd Casey" 
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = "Todd Casey" GROUP BY T1.country HAVING COUNT(*) = 0 
SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones' AND T2.directed_by = 'Michael Chang' 
SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE <> 'English' 
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2) 
SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.channel = T2.channel WHERE T2.directed_by = "Ben Jones" 
SELECT T1.package_option FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.channel = T2.channel WHERE T1.directed_by <> "Ben Jones" EXCEPT SELECT T1.package_option FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.channel = T2.channel WHERE T2.directed_by <> "Ben Jones" 
SELECT COUNT(*) FROM poker_player 
SELECT Earnings FROM poker_player ORDER BY Earnings DESC 
SELECT Final_Table_Made, Best_Finish FROM poker_player 
SELECT AVG(Earnings) FROM poker_player 
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID 
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000 
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made 
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1 
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1 
SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200 
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC 
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality 
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2 
SELECT Name, Birth_Date FROM people ORDER BY Name 
SELECT Name FROM people WHERE Nationality <> "Russia" 
SELECT T1.Name FROM people AS T1 EXCEPT SELECT T2.Name FROM poker_player AS T2 JOIN people AS T1 ON T1.People_ID = T2.People_ID 
SELECT COUNT(DISTINCT Nationality) FROM people 
SELECT COUNT(*) FROM area_code_state 
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC 
SELECT vote_id, phone_number, state FROM votes 
SELECT MAX(area_code), MIN(area_code) FROM area_code_state 
SELECT MAX(created) FROM votes WHERE state = 'CA' 
SELECT contestant_name FROM contestants WHERE NOT contestant_name = 'Jessie Alloway' 
SELECT DISTINCT state, created FROM votes 
SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2 
SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY COUNT(*) LIMIT 1 
SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA' 
SELECT COUNT(*) FROM contestants AS T1 WHERE NOT EXISTS (SELECT * FROM votes AS T2 WHERE T1.contestant_number = T2.contestant_number) 
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.created, T1.state, T1.phone_number FROM votes AS T1 JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' 
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state JOIN contestants AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%' 
SELECT Name FROM country WHERE IndepYear > 1950 
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic' 
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' 
SELECT Continent FROM country WHERE Name = 'Anguilla' 
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul' 
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba' GROUP BY T1.Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil" 
SELECT Region, Population FROM country WHERE Name = 'Angola' 
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' 
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1 
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia' 
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic' 
SELECT SUM(T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'Asia' INTERSECT SELECT SUM(T2.SurfaceArea) FROM country AS T2 WHERE T2.Continent = 'Europe' 
SELECT COUNT(*) FROM city WHERE District = 'Gelderland' 
SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = 'US territory' 
SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage 
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' 
SELECT SUM(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = "Aruba" 
SELECT COUNT(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Afghanistan' 
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.CountryCode ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1 
SELECT COUNT(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Dutch' INTERSECT SELECT COUNT(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'English' 
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' 
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French" 
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Chinese" 
SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch' 
SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' INTERSECT SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Dutch' 
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' 
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(*) = 1 
SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1 
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1 
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 JOIN country AS T2 ON T1.Name = T2.Name JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language <> 'English' AND T3.IsOfficial = 'Y' 
SELECT SUM(T1.Population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Name = T2.CountryCode WHERE T2.Language <> 'English' 
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = "Beatrix" AND T1.IsOfficial = "Y" 
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Founded = 1930 
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') 
SELECT Name FROM country WHERE Continent = 'Africa' INTERSECT SELECT Name FROM country WHERE Continent = 'Asia' GROUP BY Name HAVING MAX(population) 
SELECT Name FROM country WHERE Continent = 'Africa' INTERSECT SELECT Name FROM country WHERE Continent = 'Asia' 
SELECT Name FROM country WHERE Continent = 'Asia' GROUP BY Name HAVING MAX(population) > (SELECT MAX(population) FROM country WHERE Continent = 'Africa') 
SELECT Name FROM country WHERE Continent = 'Asia' INTERSECT SELECT Name FROM country WHERE Continent = 'Africa' 
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE <> 'English' 
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE <> 'English' 
SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.LANGUAGE <> "English" AND T1.GovernmentForm <> "Republic" 
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' AND NOT T3.IsOfficial AND T2.Continent = 'Europe' 
SELECT DISTINCT T1.name FROM city AS T1 JOIN country AS T2 ON T1.countrycode = T2.code JOIN countrylanguage AS T3 ON T2.code = T3.countrycode WHERE T3.language = "Chinese" AND T2.continent = "Asia" 
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.CountryCode JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = "Chinese" AND T2.Continent = "Asia" 
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1 
SELECT T1.Name, T1.population, T1.HeadOfState FROM country AS T1 JOIN country AS T2 ON T1.SurfaceArea = T2.SurfaceArea ORDER BY T2.SurfaceArea DESC LIMIT 1 
SELECT T1.Name, COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) >= 3 
SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(Population) FROM city GROUP BY District) GROUP BY District 
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm 
SELECT AVG(LifeExpectancy), SUM(Population), Continent FROM country WHERE LifeExpectancy < 72 GROUP BY Continent 
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3 
SELECT Name FROM country ORDER BY Population LIMIT 3 
SELECT COUNT(*) FROM country WHERE continent = 'Asia' 
SELECT Name FROM country WHERE continent = 'Europe' AND Population = 80000 
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000 
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000 
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1 
SELECT LANGUAGE FROM countrylanguage GROUP BY CountryCode ORDER BY Percentage DESC LIMIT 1 
SELECT COUNT(*), CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC LIMIT 1 
SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC LIMIT 1 
SELECT COUNT(*) FROM conductor 
SELECT Name FROM conductor ORDER BY Age 
SELECT Name FROM conductor WHERE Nationality <> "USA" 
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC 
SELECT AVG(Attendance) FROM SHOW 
SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE <> "Live final" 
SELECT COUNT(DISTINCT Nationality) FROM conductor 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID 
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) > 1 
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE YEAR(Founded) > 2008 
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company 
SELECT Major_Record_Format FROM orchestra ORDER BY COUNT(*) 
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.Orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Orchestra_ID IS NULL 
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003 
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD" 
SELECT YEAR FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1) 
SELECT COUNT(*) FROM Highschooler 
SELECT name, grade FROM Highschooler 
SELECT grade FROM Highschooler 
SELECT grade FROM Highschooler WHERE name = 'Kyle' 
SELECT name FROM Highschooler WHERE grade = 10 
SELECT ID FROM Highschooler WHERE name = "Kyle" 
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10 
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade 
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1 
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4 
SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id 
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name 
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(*) >= 3 
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id JOIN Highschooler AS T3 ON T2.friend_id = T3.id WHERE T3.name = "Kyle" 
SELECT COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = "Kyle" 
SELECT T1.id FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.student_id = T2.student_id WHERE T2.id IS NULL 
SELECT name FROM Highschooler WHERE NOT id IN (SELECT student_id FROM Friend) 
SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id WHERE T1.liked_id <> T2.student_id 
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id JOIN Friend AS T3 ON T1.id = T3.student_id WHERE T2.liked_id <> T3.liked_id 
SELECT COUNT(*), student_id FROM Likes GROUP BY student_id 
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name 
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(*) >= 2 
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(*) >= 2 
SELECT COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = "Kyle" 
SELECT AVG(T1.grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id JOIN Highschooler AS T3 ON T2.friend_id = T3.id 
SELECT MIN(grade) FROM Highschooler AS T1 WHERE NOT id IN (SELECT student_id FROM Friend) 
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals 
SELECT AVG(T1.age) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id 
SELECT T1.professional_id, T2.last_name, T2.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T2.state = 'IN' OR T1.professional_id IN (SELECT T1.professional_id FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_
SELECT T1.name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment < 1000 
SELECT DISTINCT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.first_name = T2.first_name EXCEPT SELECT DISTINCT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.first_name = T2.first_name INTERSECT SELECT DISTINCT T1.first_name FROM Professionals AS T1 JOIN D
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.role_code = 'D' EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS
SELECT T1.first_name, T1.last_name, T1.owner_id FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2 
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1 
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(T2.treatment_cost) LIMIT 1 
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1 
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2 
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.Id = T2.Id JOIN Treatments AS T3 ON T2.Id = T3.Id WHERE T3.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) 
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id 
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code 
SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id 
SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id 
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT TOP 1 breed_code FROM Dogs ORDER BY COUNT(*) DESC) 
SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = "Virginia" 
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id 
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1 
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin' 
SELECT date_arrived, date_departed FROM Dogs 
SELECT COUNT(DISTINCT dog_id) FROM Treatments 
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE treatment_type = "Dog" 
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%' 
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' 
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) 
SELECT MAX(cost_of_treatment) FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 
SELECT COUNT(*) FROM Dogs WHERE NOT dog_id IN (SELECT dog_id FROM Treatments) 
SELECT COUNT(*) FROM dogs WHERE NOT dog_id IN (SELECT dog_id FROM treatments) 
SELECT COUNT(*) FROM Owners WHERE NOT owner_id IN (SELECT owner_id FROM Dogs) 
SELECT COUNT(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE NOT T2.treatment_id = 'Dogs' 
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1 
SELECT AVG(age) FROM Dogs 
SELECT MAX(age) FROM Dogs 
SELECT charge_type, SUM(charge_amount) FROM Charges GROUP BY charge_type 
SELECT MAX(charge_amount) FROM Charges 
SELECT email_address, cell_number, home_phone FROM professionals 
SELECT DISTINCT breed_code, size_code FROM dogs 
SELECT T1.first_name, T2.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code 
SELECT Name FROM singer ORDER BY Net_Worth_Millions 
SELECT Birth_Year, Citizenship FROM singer 
SELECT Name FROM singer WHERE Citizenship <> "France" 
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949 
SELECT Name FROM singer ORDER BY Net_Wouth_Millions DESC LIMIT 1 
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship 
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1 
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship 
SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID 
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000 
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1 
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name 
SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Name IS NULL 
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955 
SELECT COUNT(*) FROM Other_Available_Features 
SELECT T1.feature_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon' 
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code 
SELECT property_name FROM Properties WHERE property_type_code = 'House' OR property_type_code = 'Apartment' GROUP BY property_name HAVING COUNT(*) > 1 
