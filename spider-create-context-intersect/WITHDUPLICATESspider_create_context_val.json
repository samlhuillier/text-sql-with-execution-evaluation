[
    {
        "question": "How many singers do we have?",
        "context": "CREATE TABLE singer (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM singer"
    },
    {
        "question": "How many singers do we have?",
        "context": "CREATE TABLE singer (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM singer"
    },
    {
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "context": "CREATE TABLE singer (name VARCHAR, country VARCHAR, age VARCHAR)",
        "answer": "SELECT name, country, age FROM singer ORDER BY age DESC"
    },
    {
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "context": "CREATE TABLE singer (name VARCHAR, country VARCHAR, age VARCHAR)",
        "answer": "SELECT name, country, age FROM singer ORDER BY age DESC"
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "context": "CREATE TABLE singer (age INTEGER, country VARCHAR)",
        "answer": "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'"
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "context": "CREATE TABLE singer (age INTEGER, country VARCHAR)",
        "answer": "SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "context": "CREATE TABLE singer (song_name VARCHAR, song_release_year VARCHAR, age VARCHAR)",
        "answer": "SELECT song_name, song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "context": "CREATE TABLE singer (song_name VARCHAR, song_release_year VARCHAR, age VARCHAR)",
        "answer": "SELECT song_name, song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "question": "What are all distinct countries where singers above age 20 are from?",
        "context": "CREATE TABLE singer (country VARCHAR, age INTEGER)",
        "answer": "SELECT DISTINCT country FROM singer WHERE age > 20"
    },
    {
        "question": "What are all distinct countries where singers above age 20 are from?",
        "context": "CREATE TABLE singer (country VARCHAR, age INTEGER)",
        "answer": "SELECT DISTINCT country FROM singer WHERE age > 20"
    },
    {
        "question": "Show all countries and the number of singers in each country.",
        "context": "CREATE TABLE singer (country VARCHAR)",
        "answer": "SELECT country, COUNT(*) FROM singer GROUP BY country"
    },
    {
        "question": "Show all countries and the number of singers in each country.",
        "context": "CREATE TABLE singer (country VARCHAR)",
        "answer": "SELECT country, COUNT(*) FROM singer GROUP BY country"
    },
    {
        "question": "List all song names by singers above the average age.",
        "context": "CREATE TABLE singer (song_name VARCHAR, age INTEGER)",
        "answer": "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)"
    },
    {
        "question": "List all song names by singers above the average age.",
        "context": "CREATE TABLE singer (song_name VARCHAR, age INTEGER)",
        "answer": "SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "context": "CREATE TABLE stadium (LOCATION VARCHAR, name VARCHAR, capacity INTEGER)",
        "answer": "SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "context": "CREATE TABLE stadium (LOCATION VARCHAR, name VARCHAR, capacity INTEGER)",
        "answer": "SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "context": "CREATE TABLE stadium (average VARCHAR, capacity INTEGER)",
        "answer": "SELECT MAX(capacity), average FROM stadium"
    },
    {
        "question": "What is the average and maximum capacities for all stadiums ?",
        "context": "CREATE TABLE stadium (capacity INTEGER)",
        "answer": "SELECT AVG(capacity), MAX(capacity) FROM stadium"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "context": "CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, average VARCHAR)",
        "answer": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "context": "CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, average VARCHAR)",
        "answer": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "question": "How many concerts are there in year 2014 or 2015?",
        "context": "CREATE TABLE concert (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015"
    },
    {
        "question": "How many concerts are there in year 2014 or 2015?",
        "context": "CREATE TABLE concert (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015"
    },
    {
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "context": "CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "context": "CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "context": "CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, year VARCHAR)",
        "answer": "SELECT T2.name, T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "context": "CREATE TABLE concert (stadium_id VARCHAR, year INTEGER); CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, stadium_id VARCHAR)",
        "answer": "SELECT t2.name, t2.capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year > 2013 GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which year has most number of concerts?",
        "context": "CREATE TABLE concert (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which year has most number of concerts?",
        "context": "CREATE TABLE concert (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the stadium names without any concert.",
        "context": "CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (name VARCHAR, stadium_id VARCHAR)",
        "answer": "SELECT name FROM stadium WHERE NOT stadium_id IN (SELECT stadium_id FROM concert)"
    },
    {
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "context": "CREATE TABLE singer (country VARCHAR, age INTEGER)",
        "answer": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30"
    },
    {
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "context": "CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, year VARCHAR); CREATE TABLE stadium (name VARCHAR)",
        "answer": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014"
    },
    {
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "context": "CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, year VARCHAR); CREATE TABLE stadium (name VARCHAR)",
        "answer": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "context": "CREATE TABLE singer_in_concert (concert_id VARCHAR); CREATE TABLE concert (concert_name VARCHAR, theme VARCHAR, concert_id VARCHAR)",
        "answer": "SELECT T2.concert_name, T2.theme, COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "context": "CREATE TABLE singer_in_concert (concert_id VARCHAR); CREATE TABLE concert (concert_name VARCHAR, theme VARCHAR, concert_id VARCHAR)",
        "answer": "SELECT T2.concert_name, T2.theme, COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "question": "List singer names and number of concerts for each singer.",
        "context": "CREATE TABLE singer_in_concert (singer_id VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "question": "List singer names and number of concerts for each singer.",
        "context": "CREATE TABLE singer_in_concert (singer_id VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "question": "List all singer names in concerts in year 2014.",
        "context": "CREATE TABLE singer_in_concert (singer_id VARCHAR, concert_id VARCHAR); CREATE TABLE concert (concert_id VARCHAR, year VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)",
        "answer": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014"
    },
    {
        "question": "List all singer names in concerts in year 2014.",
        "context": "CREATE TABLE singer_in_concert (singer_id VARCHAR, concert_id VARCHAR); CREATE TABLE concert (concert_id VARCHAR, year VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)",
        "answer": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014"
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "context": "CREATE TABLE singer (name VARCHAR, country VARCHAR, song_name VARCHAR)",
        "answer": "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "context": "CREATE TABLE singer (name VARCHAR, country VARCHAR, song_name VARCHAR)",
        "answer": "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "context": "CREATE TABLE stadium (name VARCHAR, location VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, Year VARCHAR)",
        "answer": "SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015"
    },
    {
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "context": "CREATE TABLE stadium (name VARCHAR, location VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, Year VARCHAR)",
        "answer": "SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015"
    },
    {
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "context": "CREATE TABLE concert (stadium_id VARCHAR, capacity VARCHAR); CREATE TABLE stadium (stadium_id VARCHAR, capacity VARCHAR)",
        "answer": "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)"
    },
    {
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "context": "CREATE TABLE concert (stadium_id VARCHAR, capacity VARCHAR); CREATE TABLE stadium (stadium_id VARCHAR, capacity VARCHAR)",
        "answer": "SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)"
    },
    {
        "question": "Find the number of pets whose weight is heavier than 10.",
        "context": "CREATE TABLE pets (weight INTEGER)",
        "answer": "SELECT COUNT(*) FROM pets WHERE weight > 10"
    },
    {
        "question": "Find the number of pets whose weight is heavier than 10.",
        "context": "CREATE TABLE pets (weight INTEGER)",
        "answer": "SELECT COUNT(*) FROM pets WHERE weight > 10"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "context": "CREATE TABLE pets (weight VARCHAR, pet_age VARCHAR)",
        "answer": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "question": "Find the weight of the youngest dog.",
        "context": "CREATE TABLE pets (weight VARCHAR, pet_age VARCHAR)",
        "answer": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "context": "CREATE TABLE pets (petType VARCHAR, weight INTEGER)",
        "answer": "SELECT MAX(weight), petType FROM pets GROUP BY petType"
    },
    {
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "context": "CREATE TABLE pets (petType VARCHAR, weight INTEGER)",
        "answer": "SELECT MAX(weight), petType FROM pets GROUP BY petType"
    },
    {
        "question": "Find number of pets owned by students who are older than 20.",
        "context": "CREATE TABLE student (stuid VARCHAR, age INTEGER); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20"
    },
    {
        "question": "Find number of pets owned by students who are older than 20.",
        "context": "CREATE TABLE student (stuid VARCHAR, age INTEGER); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR, sex VARCHAR)",
        "answer": "SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'"
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR, sex VARCHAR)",
        "answer": "SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "context": "CREATE TABLE pets (pettype VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT pettype) FROM pets"
    },
    {
        "question": "Find the number of distinct type of pets.",
        "context": "CREATE TABLE pets (pettype VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT pettype) FROM pets"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (Fname VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'"
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (Fname VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets .",
        "context": "CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)",
        "answer": "SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'"
    },
    {
        "question": "Find the first name of students who have both cat and dog pets .",
        "context": "CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)",
        "answer": "SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'"
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "context": "CREATE TABLE student (stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (major VARCHAR, age VARCHAR, stuid VARCHAR)",
        "answer": "SELECT major, age FROM student WHERE NOT stuid IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'"
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'"
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)",
        "answer": "SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND NOT T1.stuid IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "context": "CREATE TABLE pets (pettype VARCHAR, weight VARCHAR, pet_age VARCHAR)",
        "answer": "SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "context": "CREATE TABLE pets (pettype VARCHAR, weight VARCHAR, pet_age VARCHAR)",
        "answer": "SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "context": "CREATE TABLE pets (petid VARCHAR, weight VARCHAR, pet_age INTEGER)",
        "answer": "SELECT petid, weight FROM pets WHERE pet_age > 1"
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "context": "CREATE TABLE pets (petid VARCHAR, weight VARCHAR, pet_age INTEGER)",
        "answer": "SELECT petid, weight FROM pets WHERE pet_age > 1"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "context": "CREATE TABLE pets (pettype VARCHAR, pet_age INTEGER)",
        "answer": "SELECT AVG(pet_age), MAX(pet_age), pettype FROM pets GROUP BY pettype"
    },
    {
        "question": "Find the average and maximum age for each type of pet.",
        "context": "CREATE TABLE pets (pettype VARCHAR, pet_age INTEGER)",
        "answer": "SELECT AVG(pet_age), MAX(pet_age), pettype FROM pets GROUP BY pettype"
    },
    {
        "question": "Find the average weight for each pet type.",
        "context": "CREATE TABLE pets (pettype VARCHAR, weight INTEGER)",
        "answer": "SELECT AVG(weight), pettype FROM pets GROUP BY pettype"
    },
    {
        "question": "Find the average weight for each pet type.",
        "context": "CREATE TABLE pets (pettype VARCHAR, weight INTEGER)",
        "answer": "SELECT AVG(weight), pettype FROM pets GROUP BY pettype"
    },
    {
        "question": "Find the first name and age of students who have a pet.",
        "context": "CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT DISTINCT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid"
    },
    {
        "question": "Find the first name and age of students who have a pet.",
        "context": "CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT DISTINCT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "context": "CREATE TABLE has_pet (petid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR, Lname VARCHAR)",
        "answer": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'"
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "context": "CREATE TABLE has_pet (petid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR, Lname VARCHAR)",
        "answer": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'"
    },
    {
        "question": "Find the number of pets for each student who has any pet and student id.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT COUNT(*), T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid"
    },
    {
        "question": "Find the number of pets for each student who has any pet and student id.",
        "context": "CREATE TABLE has_pet (stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT COUNT(*), T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid"
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "context": "CREATE TABLE student (fname VARCHAR, sex VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1"
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "context": "CREATE TABLE student (fname VARCHAR, sex VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)",
        "answer": "SELECT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "context": "CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pet_age VARCHAR, pettype VARCHAR)",
        "answer": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'"
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "context": "CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pet_age VARCHAR, pettype VARCHAR)",
        "answer": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'"
    },
    {
        "question": "Find the average age of students who do not have any pet .",
        "context": "CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE has_pet (age INTEGER, stuid VARCHAR)",
        "answer": "SELECT AVG(age) FROM student WHERE NOT stuid IN (SELECT stuid FROM has_pet)"
    },
    {
        "question": "How many continents are there?",
        "context": "CREATE TABLE CONTINENTS (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CONTINENTS"
    },
    {
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "context": "CREATE TABLE COUNTRIES (Continent VARCHAR); CREATE TABLE CONTINENTS (ContId VARCHAR, Continent VARCHAR)",
        "answer": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"
    },
    {
        "question": "How many countries are listed?",
        "context": "CREATE TABLE COUNTRIES (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM COUNTRIES"
    },
    {
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "context": "CREATE TABLE MODEL_LIST (Maker VARCHAR); CREATE TABLE CAR_MAKERS (FullName VARCHAR, Id VARCHAR)",
        "answer": "SELECT T1.FullName, T1.Id, COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id"
    },
    {
        "question": "Which model of the car has the minimum horsepower?",
        "context": "CREATE TABLE CARS_DATA (Id VARCHAR, horsepower VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower LIMIT 1"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "context": "CREATE TABLE CARS_DATA (Id VARCHAR, Weight INTEGER); CREATE TABLE CARS_DATA (Weight INTEGER); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM CARS_DATA)"
    },
    {
        "question": "Find the model of the car whose weight is below the average weight.",
        "context": "CREATE TABLE CARS_DATA (Id VARCHAR, Weight INTEGER); CREATE TABLE CARS_DATA (Weight INTEGER); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM CARS_DATA)"
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "context": "CREATE TABLE MODEL_LIST (Maker VARCHAR, model VARCHAR); CREATE TABLE CAR_MAKERS (Maker VARCHAR, Id VARCHAR); CREATE TABLE CARS_DATA (id VARCHAR, year VARCHAR); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'"
    },
    {
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "context": "CREATE TABLE CARS_DATA (YEAR INTEGER); CREATE TABLE CAR_NAMES (Make VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Year VARCHAR, Id VARCHAR)",
        "answer": "SELECT T2.Make, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MIN(YEAR) FROM CARS_DATA)"
    },
    {
        "question": "Which distinct car models are the produced after 1980?",
        "context": "CREATE TABLE CARS_DATA (id VARCHAR, year INTEGER); CREATE TABLE MODEL_LIST (model VARCHAR); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980"
    },
    {
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "context": "CREATE TABLE COUNTRIES (continent VARCHAR, CountryId VARCHAR); CREATE TABLE CONTINENTS (Continent VARCHAR, ContId VARCHAR); CREATE TABLE car_makers (Country VARCHAR)",
        "answer": "SELECT T1.Continent, COUNT(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"
    },
    {
        "question": "Which of the countries has the most car makers? List the country name.",
        "context": "CREATE TABLE CAR_MAKERS (Country VARCHAR); CREATE TABLE COUNTRIES (CountryName VARCHAR, CountryId VARCHAR)",
        "answer": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "context": "CREATE TABLE model_list (maker VARCHAR); CREATE TABLE car_makers (fullname VARCHAR, id VARCHAR)",
        "answer": "SELECT COUNT(*), t2.fullname FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id GROUP BY t2.id"
    },
    {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "context": "CREATE TABLE CAR_MAKERS (FullName VARCHAR, id VARCHAR, Id VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)",
        "answer": "SELECT COUNT(*), T2.FullName, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id"
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "context": "CREATE TABLE CARS_DATA (Accelerate VARCHAR, Id VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Make VARCHAR)",
        "answer": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'"
    },
    {
        "question": "How many car makers are there in france?",
        "context": "CREATE TABLE COUNTRIES (CountryId VARCHAR, CountryName VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'"
    },
    {
        "question": "How many car models are produced in the usa?",
        "context": "CREATE TABLE CAR_MAKERS (Id VARCHAR, Country VARCHAR); CREATE TABLE COUNTRIES (CountryId VARCHAR, CountryName VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)",
        "answer": "SELECT COUNT(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'"
    },
    {
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "context": "CREATE TABLE CARS_DATA (mpg INTEGER, Cylinders VARCHAR)",
        "answer": "SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = 4"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "context": "CREATE TABLE cars_data (weight INTEGER, cylinders VARCHAR, year VARCHAR)",
        "answer": "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974"
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "context": "CREATE TABLE cars_data (weight INTEGER, cylinders VARCHAR, year VARCHAR)",
        "answer": "SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974"
    },
    {
        "question": "What are all the makers and models?",
        "context": "CREATE TABLE MODEL_LIST (Maker VARCHAR, Model VARCHAR)",
        "answer": "SELECT Maker, Model FROM MODEL_LIST"
    },
    {
        "question": "What are the countries having at least one car maker? List name and id.",
        "context": "CREATE TABLE CAR_MAKERS (Country VARCHAR); CREATE TABLE COUNTRIES (CountryName VARCHAR, CountryId VARCHAR)",
        "answer": "SELECT T1.CountryName, T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(*) >= 1"
    },
    {
        "question": "What is the number of the cars with horsepower more than 150?",
        "context": "CREATE TABLE CARS_DATA (horsepower INTEGER)",
        "answer": "SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150"
    },
    {
        "question": "What is the average weight of cars each year?",
        "context": "CREATE TABLE CARS_DATA (YEAR VARCHAR, Weight INTEGER)",
        "answer": "SELECT AVG(Weight), YEAR FROM CARS_DATA GROUP BY YEAR"
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "context": "CREATE TABLE COUNTRIES (CountryName VARCHAR, Continent VARCHAR, CountryId VARCHAR); CREATE TABLE CONTINENTS (ContId VARCHAR, Continent VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)",
        "answer": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING COUNT(*) >= 3"
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "context": "CREATE TABLE CAR_NAMES (Make VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (horsepower VARCHAR, Id VARCHAR, cylinders VARCHAR)",
        "answer": "SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1"
    },
    {
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "context": "CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, mpg VARCHAR)",
        "answer": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1"
    },
    {
        "question": "What is the car model with the highest mpg ?",
        "context": "CREATE TABLE cars_data (id VARCHAR, mpg VARCHAR); CREATE TABLE car_names (model VARCHAR, makeid VARCHAR)",
        "answer": "SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.mpg DESC LIMIT 1"
    },
    {
        "question": "What is the average horsepower of the cars before 1980?",
        "context": "CREATE TABLE CARS_DATA (horsepower INTEGER, YEAR INTEGER)",
        "answer": "SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980"
    },
    {
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "context": "CREATE TABLE cars_data (horsepower INTEGER, year INTEGER)",
        "answer": "SELECT AVG(horsepower) FROM cars_data WHERE year < 1980"
    },
    {
        "question": "What is the average edispl of the cars of model volvo?",
        "context": "CREATE TABLE CARS_DATA (edispl INTEGER, Id VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Model VARCHAR)",
        "answer": "SELECT AVG(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'"
    },
    {
        "question": "What is the maximum accelerate for different number of cylinders?",
        "context": "CREATE TABLE CARS_DATA (Cylinders VARCHAR, Accelerate INTEGER)",
        "answer": "SELECT MAX(Accelerate), Cylinders FROM CARS_DATA GROUP BY Cylinders"
    },
    {
        "question": "Which model has the most version(make) of cars?",
        "context": "CREATE TABLE CAR_NAMES (Model VARCHAR)",
        "answer": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "context": "CREATE TABLE CARS_DATA (Cylinders INTEGER)",
        "answer": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 4"
    },
    {
        "question": "how many cars were produced in 1980?",
        "context": "CREATE TABLE CARS_DATA (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = 1980"
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "context": "CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'"
    },
    {
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "context": "CREATE TABLE MODEL_LIST (Maker VARCHAR); CREATE TABLE CAR_MAKERS (FullName VARCHAR, Id VARCHAR)",
        "answer": "SELECT T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3"
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "context": "CREATE TABLE MODEL_LIST (Model VARCHAR, Maker VARCHAR); CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, weight VARCHAR)",
        "answer": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500"
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "context": "CREATE TABLE cars_data (year VARCHAR, weight INTEGER)",
        "answer": "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000"
    },
    {
        "question": "What is the horsepower of the car with the largest accelerate?",
        "context": "CREATE TABLE CARS_DATA (horsepower VARCHAR, accelerate VARCHAR)",
        "answer": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "context": "CREATE TABLE CARS_DATA (cylinders VARCHAR, Id VARCHAR, accelerate VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Model VARCHAR)",
        "answer": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate LIMIT 1"
    },
    {
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "context": "CREATE TABLE CARS_DATA (Accelerate INTEGER, Horsepower VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1)"
    },
    {
        "question": "How many countries has more than 2 car makers ?",
        "context": "CREATE TABLE car_makers (country VARCHAR); CREATE TABLE countries (countryid VARCHAR)",
        "answer": "SELECT COUNT(*) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 2"
    },
    {
        "question": "How many countries has more than 2 car makers ?",
        "context": "CREATE TABLE car_makers (country VARCHAR); CREATE TABLE countries (countryid VARCHAR)",
        "answer": "SELECT COUNT(*) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 2"
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "context": "CREATE TABLE CARS_DATA (Cylinders INTEGER)",
        "answer": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6"
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "context": "CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, Cylinders VARCHAR, horsepower VARCHAR)",
        "answer": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1"
    },
    {
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "context": "CREATE TABLE CARS_DATA (Id VARCHAR, Horsepower INTEGER, Cylinders VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Make VARCHAR); CREATE TABLE CARS_DATA (Horsepower INTEGER)",
        "answer": "SELECT T2.MakeId, T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3"
    },
    {
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "context": "CREATE TABLE cars_data (horsepower INTEGER); CREATE TABLE car_names (makeid VARCHAR, make VARCHAR); CREATE TABLE cars_data (id VARCHAR, horsepower INTEGER, cylinders VARCHAR)",
        "answer": "SELECT t2.makeid, t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND t1.cylinders < 4"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "context": "CREATE TABLE cars_data (mpg INTEGER, cylinders VARCHAR, year VARCHAR)",
        "answer": "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "context": "CREATE TABLE cars_data (mpg INTEGER, cylinders VARCHAR, year VARCHAR)",
        "answer": "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980"
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "context": "CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE MODEL_LIST (model VARCHAR, Model VARCHAR, Maker VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, weight VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR)",
        "answer": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName <> 'Ford Motor Company'"
    },
    {
        "question": "What are the name of the countries where there is not a single car maker?",
        "context": "CREATE TABLE countries (CountryName VARCHAR, countryId VARCHAR); CREATE TABLE countries (CountryName VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)",
        "answer": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country"
    },
    {
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "context": "CREATE TABLE car_makers (id VARCHAR, maker VARCHAR); CREATE TABLE model_list (maker VARCHAR, model VARCHAR); CREATE TABLE car_names (model VARCHAR)",
        "answer": "SELECT t1.id, t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING COUNT(*) >= 2 INTERSECT SELECT t1.id, t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model GROUP BY t1.id HAVING COUNT(*) > 3"
    },
    {
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "context": "CREATE TABLE CAR_NAMES (model VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR, model VARCHAR); CREATE TABLE CAR_MAKERS (Id VARCHAR, Maker VARCHAR)",
        "answer": "SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING COUNT(*) > 3"
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "context": "CREATE TABLE Countries (countryId VARCHAR, CountryName VARCHAR, CountryId VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR, Id VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR, Model VARCHAR)",
        "answer": "SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING COUNT(*) > 3 UNION SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'"
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "context": "CREATE TABLE model_list (maker VARCHAR, model VARCHAR); CREATE TABLE countries (countryid VARCHAR, countryname VARCHAR); CREATE TABLE car_makers (country VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 3 UNION SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country JOIN model_list AS t3 ON t2.id = t3.maker WHERE t3.model = 'fiat'"
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "context": "CREATE TABLE AIRLINES (Country VARCHAR, Airline VARCHAR)",
        "answer": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\""
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "context": "CREATE TABLE AIRLINES (Country VARCHAR, Airline VARCHAR)",
        "answer": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\""
    },
    {
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "context": "CREATE TABLE AIRLINES (Abbreviation VARCHAR, Airline VARCHAR)",
        "answer": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\""
    },
    {
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "context": "CREATE TABLE AIRLINES (Abbreviation VARCHAR, Airline VARCHAR)",
        "answer": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\""
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR, Country VARCHAR)",
        "answer": "SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = \"USA\""
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR, Country VARCHAR)",
        "answer": "SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = \"USA\""
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "context": "CREATE TABLE AIRPORTS (AirportCode VARCHAR, AirportName VARCHAR, city VARCHAR)",
        "answer": "SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = \"Anthony\""
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "context": "CREATE TABLE AIRPORTS (AirportCode VARCHAR, AirportName VARCHAR, city VARCHAR)",
        "answer": "SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = \"Anthony\""
    },
    {
        "question": "How many airlines are there?",
        "context": "CREATE TABLE airlines (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM airlines"
    },
    {
        "question": "How many airlines are there?",
        "context": "CREATE TABLE airlines (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM airlines"
    },
    {
        "question": "How many airports do we have?",
        "context": "CREATE TABLE AIRPORTS (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRPORTS"
    },
    {
        "question": "How many airports do we have?",
        "context": "CREATE TABLE AIRPORTS (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRPORTS"
    },
    {
        "question": "How many flights do we have?",
        "context": "CREATE TABLE Flight (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Flight"
    },
    {
        "question": "How many flights do we have?",
        "context": "CREATE TABLE FLIGHTS (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS"
    },
    {
        "question": "Which airline has abbreviation 'UAL'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR)",
        "answer": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\""
    },
    {
        "question": "Which airline has abbreviation 'UAL'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR)",
        "answer": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\""
    },
    {
        "question": "How many airlines are from USA?",
        "context": "CREATE TABLE AIRLINES (Country VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES WHERE Country = \"USA\""
    },
    {
        "question": "How many airlines are from USA?",
        "context": "CREATE TABLE AIRLINES (Country VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES WHERE Country = \"USA\""
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "context": "CREATE TABLE AIRPORTS (City VARCHAR, Country VARCHAR, AirportName VARCHAR)",
        "answer": "SELECT City, Country FROM AIRPORTS WHERE AirportName = \"Alton\""
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "context": "CREATE TABLE AIRPORTS (City VARCHAR, Country VARCHAR, AirportName VARCHAR)",
        "answer": "SELECT City, Country FROM AIRPORTS WHERE AirportName = \"Alton\""
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "context": "CREATE TABLE AIRPORTS (AirportName VARCHAR, AirportCode VARCHAR)",
        "answer": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\""
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "context": "CREATE TABLE AIRPORTS (AirportName VARCHAR, AirportCode VARCHAR)",
        "answer": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\""
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "context": "CREATE TABLE AIRPORTS (AirportName VARCHAR, City VARCHAR)",
        "answer": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "context": "CREATE TABLE AIRPORTS (AirportName VARCHAR, City VARCHAR)",
        "answer": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "question": "How many flights depart from 'APG'?",
        "context": "CREATE TABLE FLIGHTS (SourceAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = \"APG\""
    },
    {
        "question": "How many flights depart from 'APG'?",
        "context": "CREATE TABLE FLIGHTS (SourceAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = \"APG\""
    },
    {
        "question": "How many flights have destination ATO?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = \"ATO\""
    },
    {
        "question": "How many flights have destination ATO?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = \"ATO\""
    },
    {
        "question": "How many flights depart from City Aberdeen?",
        "context": "CREATE TABLE FLIGHTS (SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "How many flights depart from City Aberdeen?",
        "context": "CREATE TABLE FLIGHTS (SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "How many flights arriving in Aberdeen city?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "How many flights arriving in Aberdeen city?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\""
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\""
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\""
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\""
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\""
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\""
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "context": "CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (DestAirport VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\""
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "context": "CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (DestAirport VARCHAR, Airline VARCHAR)",
        "answer": "SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\""
    },
    {
        "question": "Which city has most number of arriving flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR)",
        "answer": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which city has most number of arriving flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR)",
        "answer": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which city has most number of departing flights?",
        "context": "CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR); CREATE TABLE FLIGHTS (SourceAirport VARCHAR)",
        "answer": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which city has most number of departing flights?",
        "context": "CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR); CREATE TABLE FLIGHTS (SourceAirport VARCHAR)",
        "answer": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the code of airport that has the highest number of flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)",
        "answer": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the code of airport that has the highest number of flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)",
        "answer": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the code of airport that has fewest number of flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)",
        "answer": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "What is the code of airport that has fewest number of flights?",
        "context": "CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)",
        "answer": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "Which airline has most number of flights?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which airline has most number of flights?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Abbreviation VARCHAR, Country VARCHAR, Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Abbreviation VARCHAR, Country VARCHAR, Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\""
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\""
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\""
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\""
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\""
    },
    {
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\""
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\""
    },
    {
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "context": "CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\""
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) > 10"
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) > 10"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200"
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "context": "CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200"
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "context": "CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (FlightNo VARCHAR, Airline VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\""
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "context": "CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (FlightNo VARCHAR, Airline VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\""
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\""
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR)",
        "answer": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\""
    },
    {
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR)",
        "answer": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\""
    },
    {
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR)",
        "answer": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\""
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "context": "CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)",
        "answer": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\""
    },
    {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "context": "CREATE TABLE Airports (AirportCode VARCHAR, city VARCHAR); CREATE TABLE Flights (DestAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\""
    },
    {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "context": "CREATE TABLE Airports (AirportCode VARCHAR, city VARCHAR); CREATE TABLE Flights (DestAirport VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\""
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "context": "CREATE TABLE Flights (AirportName VARCHAR, AirportCode VARCHAR, SourceAirport VARCHAR, DestAirport VARCHAR); CREATE TABLE Airports (AirportName VARCHAR, AirportCode VARCHAR, SourceAirport VARCHAR, DestAirport VARCHAR)",
        "answer": "SELECT AirportName FROM Airports WHERE NOT AirportCode IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "question": "How many employees do we have?",
        "context": "CREATE TABLE Employee (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Employee"
    },
    {
        "question": "How many employees do we have?",
        "context": "CREATE TABLE Employee (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Employee"
    },
    {
        "question": "Sort employee names by their age in ascending order.",
        "context": "CREATE TABLE employee (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM employee ORDER BY age"
    },
    {
        "question": "Sort employee names by their age in ascending order.",
        "context": "CREATE TABLE employee (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM employee ORDER BY age"
    },
    {
        "question": "What is the number of employees from each city?",
        "context": "CREATE TABLE employee (city VARCHAR)",
        "answer": "SELECT COUNT(*), city FROM employee GROUP BY city"
    },
    {
        "question": "What is the number of employees from each city?",
        "context": "CREATE TABLE employee (city VARCHAR)",
        "answer": "SELECT COUNT(*), city FROM employee GROUP BY city"
    },
    {
        "question": "Which cities do more than one employee under age 30 come from?",
        "context": "CREATE TABLE employee (city VARCHAR, age INTEGER)",
        "answer": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1"
    },
    {
        "question": "Which cities do more than one employee under age 30 come from?",
        "context": "CREATE TABLE employee (city VARCHAR, age INTEGER)",
        "answer": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1"
    },
    {
        "question": "Find the number of shops in each location.",
        "context": "CREATE TABLE shop (LOCATION VARCHAR)",
        "answer": "SELECT COUNT(*), LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "question": "Find the number of shops in each location.",
        "context": "CREATE TABLE shop (LOCATION VARCHAR)",
        "answer": "SELECT COUNT(*), LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "context": "CREATE TABLE shop (manager_name VARCHAR, district VARCHAR, number_products VARCHAR)",
        "answer": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "context": "CREATE TABLE shop (manager_name VARCHAR, district VARCHAR, number_products VARCHAR)",
        "answer": "SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "question": "find the minimum and maximum number of products of all stores.",
        "context": "CREATE TABLE shop (Number_products INTEGER)",
        "answer": "SELECT MIN(Number_products), MAX(Number_products) FROM shop"
    },
    {
        "question": "find the minimum and maximum number of products of all stores.",
        "context": "CREATE TABLE shop (Number_products INTEGER)",
        "answer": "SELECT MIN(Number_products), MAX(Number_products) FROM shop"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "context": "CREATE TABLE shop (name VARCHAR, LOCATION VARCHAR, district VARCHAR, number_products VARCHAR)",
        "answer": "SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC"
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "context": "CREATE TABLE shop (name VARCHAR, LOCATION VARCHAR, district VARCHAR, number_products VARCHAR)",
        "answer": "SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC"
    },
    {
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "context": "CREATE TABLE shop (name VARCHAR, number_products INTEGER)",
        "answer": "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)"
    },
    {
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "context": "CREATE TABLE shop (name VARCHAR, number_products INTEGER)",
        "answer": "SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)"
    },
    {
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "context": "CREATE TABLE evaluation (Employee_ID VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)",
        "answer": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "context": "CREATE TABLE evaluation (Employee_ID VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)",
        "answer": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name of the employee who got the highest one time bonus.",
        "context": "CREATE TABLE evaluation (Employee_ID VARCHAR, bonus VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)",
        "answer": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "question": "Find the name of the employee who got the highest one time bonus.",
        "context": "CREATE TABLE evaluation (Employee_ID VARCHAR, bonus VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)",
        "answer": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "question": "Find the names of employees who never won any award in the evaluation.",
        "context": "CREATE TABLE evaluation (name VARCHAR, Employee_ID VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)",
        "answer": "SELECT name FROM employee WHERE NOT Employee_ID IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "context": "CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)",
        "answer": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "context": "CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)",
        "answer": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name of the shops that do not hire any employee.",
        "context": "CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (name VARCHAR, shop_id VARCHAR)",
        "answer": "SELECT name FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM hiring)"
    },
    {
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "context": "CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)",
        "answer": "SELECT COUNT(*), t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name"
    },
    {
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "context": "CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)",
        "answer": "SELECT COUNT(*), t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name"
    },
    {
        "question": "What is total bonus given in all evaluations?",
        "context": "CREATE TABLE evaluation (bonus INTEGER)",
        "answer": "SELECT SUM(bonus) FROM evaluation"
    },
    {
        "question": "What is total bonus given in all evaluations?",
        "context": "CREATE TABLE evaluation (bonus INTEGER)",
        "answer": "SELECT SUM(bonus) FROM evaluation"
    },
    {
        "question": "Give me all the information about hiring.",
        "context": "CREATE TABLE hiring (Id VARCHAR)",
        "answer": "SELECT * FROM hiring"
    },
    {
        "question": "Give me all the information about hiring.",
        "context": "CREATE TABLE hiring (Id VARCHAR)",
        "answer": "SELECT * FROM hiring"
    },
    {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "context": "CREATE TABLE shop (district VARCHAR, Number_products INTEGER)",
        "answer": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000"
    },
    {
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "context": "CREATE TABLE shop (district VARCHAR, Number_products INTEGER)",
        "answer": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000"
    },
    {
        "question": "How many different store locations are there?",
        "context": "CREATE TABLE shop (LOCATION VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT LOCATION) FROM shop"
    },
    {
        "question": "How many different store locations are there?",
        "context": "CREATE TABLE shop (LOCATION VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT LOCATION) FROM shop"
    },
    {
        "question": "Show the number of documents.",
        "context": "CREATE TABLE Documents (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Documents"
    },
    {
        "question": "Show the number of documents.",
        "context": "CREATE TABLE Documents (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Documents"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR, document_description VARCHAR)",
        "answer": "SELECT document_id, document_name, document_description FROM Documents"
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR, document_description VARCHAR)",
        "answer": "SELECT document_id, document_name, document_description FROM Documents"
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "context": "CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR, Document_Description VARCHAR)",
        "answer": "SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "context": "CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR, Document_Description VARCHAR)",
        "answer": "SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "context": "CREATE TABLE Documents (document_id VARCHAR, template_id VARCHAR, Document_Description VARCHAR, document_name VARCHAR)",
        "answer": "SELECT document_id, template_id, Document_Description FROM Documents WHERE document_name = \"Robbin CV\""
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "context": "CREATE TABLE Documents (document_id VARCHAR, template_id VARCHAR, Document_Description VARCHAR, document_name VARCHAR)",
        "answer": "SELECT document_id, template_id, Document_Description FROM Documents WHERE document_name = \"Robbin CV\""
    },
    {
        "question": "How many different templates do all document use?",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT template_id) FROM Documents"
    },
    {
        "question": "How many different templates do all document use?",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT template_id) FROM Documents"
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "context": "CREATE TABLE Templates (Template_ID VARCHAR, Template_Type_Code VARCHAR); CREATE TABLE Documents (Template_ID VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'"
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "context": "CREATE TABLE Templates (Template_ID VARCHAR, Template_Type_Code VARCHAR); CREATE TABLE Documents (Template_ID VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'"
    },
    {
        "question": "Show all template ids and number of documents using each template.",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT template_id, COUNT(*) FROM Documents GROUP BY template_id"
    },
    {
        "question": "Show all template ids and number of documents using each template.",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT template_id, COUNT(*) FROM Documents GROUP BY template_id"
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (Template_Type_Code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_id, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (Template_Type_Code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_id, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show ids for all templates that are used by more than one document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1"
    },
    {
        "question": "Show ids for all templates that are used by more than one document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR)",
        "answer": "SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1"
    },
    {
        "question": "Show ids for all templates not used by any document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR)",
        "answer": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "question": "Show ids for all templates not used by any document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR)",
        "answer": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "question": "How many templates do we have?",
        "context": "CREATE TABLE Templates (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Templates"
    },
    {
        "question": "How many templates do we have?",
        "context": "CREATE TABLE Templates (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Templates"
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "context": "CREATE TABLE Templates (template_id VARCHAR, version_number VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_id, version_number, template_type_code FROM Templates"
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "context": "CREATE TABLE Templates (template_id VARCHAR, version_number VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_id, version_number, template_type_code FROM Templates"
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "context": "CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\""
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "context": "CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\""
    },
    {
        "question": "How many templates have template type code CV?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Templates WHERE template_type_code = \"CV\""
    },
    {
        "question": "How many templates have template type code CV?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Templates WHERE template_type_code = \"CV\""
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "context": "CREATE TABLE Templates (version_number INTEGER, template_type_code VARCHAR)",
        "answer": "SELECT version_number, template_type_code FROM Templates WHERE version_number > 5"
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "context": "CREATE TABLE Templates (version_number INTEGER, template_type_code VARCHAR)",
        "answer": "SELECT version_number, template_type_code FROM Templates WHERE version_number > 5"
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code, COUNT(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code, COUNT(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "question": "Which template type code has most number of templates?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which template type code has most number of templates?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) < 3"
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) < 3"
    },
    {
        "question": "What the smallest version number and its template type code?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, Version_Number INTEGER)",
        "answer": "SELECT MIN(Version_Number), template_type_code FROM Templates"
    },
    {
        "question": "What the smallest version number and its template type code?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, Version_Number INTEGER)",
        "answer": "SELECT MIN(Version_Number), template_type_code FROM Templates"
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR); CREATE TABLE Documents (template_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\""
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR); CREATE TABLE Documents (template_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\""
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "context": "CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\""
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "context": "CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\""
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_type_code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_type_code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)",
        "answer": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show all template type codes that are not used by any document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id"
    },
    {
        "question": "Show all template type codes that are not used by any document.",
        "context": "CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR)",
        "answer": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id"
    },
    {
        "question": "Show all template type codes and descriptions.",
        "context": "CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT template_type_code, template_type_description FROM Ref_template_types"
    },
    {
        "question": "Show all template type codes and descriptions.",
        "context": "CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT template_type_code, template_type_description FROM Ref_template_types"
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "context": "CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\""
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "context": "CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\""
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "context": "CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\""
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "context": "CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\""
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, Template_ID VARCHAR); CREATE TABLE Documents (template_ID VARCHAR); CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID"
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "context": "CREATE TABLE Templates (template_type_code VARCHAR, Template_ID VARCHAR); CREATE TABLE Documents (template_ID VARCHAR); CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)",
        "answer": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID"
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "context": "CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR); CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\""
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "context": "CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR); CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)",
        "answer": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\""
    },
    {
        "question": "How many paragraphs in total?",
        "context": "CREATE TABLE Paragraphs (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Paragraphs"
    },
    {
        "question": "How many paragraphs in total?",
        "context": "CREATE TABLE Paragraphs (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Paragraphs"
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "context": "CREATE TABLE Documents (document_ID VARCHAR, document_name VARCHAR); CREATE TABLE Paragraphs (document_ID VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'"
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "context": "CREATE TABLE Documents (document_ID VARCHAR, document_name VARCHAR); CREATE TABLE Paragraphs (document_ID VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "context": "CREATE TABLE paragraphs (other_details VARCHAR, paragraph_text VARCHAR)",
        "answer": "SELECT other_details FROM paragraphs WHERE paragraph_text LIKE 'korea'"
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "context": "CREATE TABLE paragraphs (other_details VARCHAR, paragraph_text VARCHAR)",
        "answer": "SELECT other_details FROM paragraphs WHERE paragraph_text LIKE 'korea'"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, Document_Name VARCHAR); CREATE TABLE Paragraphs (paragraph_id VARCHAR, paragraph_text VARCHAR, document_id VARCHAR)",
        "answer": "SELECT T1.paragraph_id, T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'"
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, Document_Name VARCHAR); CREATE TABLE Paragraphs (paragraph_id VARCHAR, paragraph_text VARCHAR, document_id VARCHAR)",
        "answer": "SELECT T1.paragraph_id, T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'"
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "context": "CREATE TABLE Paragraphs (paragraph_text VARCHAR, document_id VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\""
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "context": "CREATE TABLE Paragraphs (paragraph_text VARCHAR, document_id VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\""
    },
    {
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "context": "CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT T1.document_id, T2.document_name, COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id"
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "context": "CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT T1.document_id, T2.document_name, COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id"
    },
    {
        "question": "List all document ids with at least two paragraphs.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "List all document ids with at least two paragraphs.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "context": "CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT T1.document_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "context": "CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT T1.document_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the document id with least number of paragraphs?",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "What is the document id with 1 to 2 paragraphs?",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2"
    },
    {
        "question": "What is the document id with 1 to 2 paragraphs?",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2"
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR, paragraph_text VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'"
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "context": "CREATE TABLE Paragraphs (document_id VARCHAR, paragraph_text VARCHAR)",
        "answer": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'"
    },
    {
        "question": "How many teachers are there?",
        "context": "CREATE TABLE teacher (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM teacher"
    },
    {
        "question": "How many teachers are there?",
        "context": "CREATE TABLE teacher (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM teacher"
    },
    {
        "question": "List the names of teachers in ascending order of age.",
        "context": "CREATE TABLE teacher (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM teacher ORDER BY Age"
    },
    {
        "question": "What are the age and hometown of teachers?",
        "context": "CREATE TABLE teacher (Age VARCHAR, Hometown VARCHAR)",
        "answer": "SELECT Age, Hometown FROM teacher"
    },
    {
        "question": "What are the age and hometown of teachers?",
        "context": "CREATE TABLE teacher (Age VARCHAR, Hometown VARCHAR)",
        "answer": "SELECT Age, Hometown FROM teacher"
    },
    {
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "context": "CREATE TABLE teacher (name VARCHAR, hometown VARCHAR)",
        "answer": "SELECT name FROM teacher WHERE hometown <> \"little lever urban district\""
    },
    {
        "question": "Show the name of teachers aged either 32 or 33?",
        "context": "CREATE TABLE teacher (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33"
    },
    {
        "question": "Show the name of teachers aged either 32 or 33?",
        "context": "CREATE TABLE teacher (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33"
    },
    {
        "question": "What is the hometown of the youngest teacher?",
        "context": "CREATE TABLE teacher (Hometown VARCHAR, Age VARCHAR)",
        "answer": "SELECT Hometown FROM teacher ORDER BY Age LIMIT 1"
    },
    {
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "question": "List the most common hometown of teachers.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the most common hometown of teachers.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the hometowns shared by at least two teachers.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show the hometowns shared by at least two teachers.",
        "context": "CREATE TABLE teacher (Hometown VARCHAR)",
        "answer": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)",
        "answer": "SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID"
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)",
        "answer": "SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID"
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)",
        "answer": "SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)",
        "answer": "SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "question": "Show the name of the teacher for the math course.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course_ID VARCHAR, Course VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\""
    },
    {
        "question": "Show the name of the teacher for the math course.",
        "context": "CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course_ID VARCHAR, Course VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\""
    },
    {
        "question": "Show names of teachers and the number of courses they teach.",
        "context": "CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)",
        "answer": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "question": "Show names of teachers and the number of courses they teach.",
        "context": "CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)",
        "answer": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "question": "Show names of teachers that teach at least two courses.",
        "context": "CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show names of teachers that teach at least two courses.",
        "context": "CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2"
    },
    {
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "context": "CREATE TABLE course_arrange (Name VARCHAR, Teacher_id VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_id VARCHAR)",
        "answer": "SELECT Name FROM teacher WHERE NOT Teacher_id IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "question": "How many visitors below age 30 are there?",
        "context": "CREATE TABLE visitor (age INTEGER)",
        "answer": "SELECT COUNT(*) FROM visitor WHERE age < 30"
    },
    {
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "context": "CREATE TABLE visitor (name VARCHAR, Level_of_membership INTEGER)",
        "answer": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC"
    },
    {
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "context": "CREATE TABLE visitor (age INTEGER, Level_of_membership VARCHAR)",
        "answer": "SELECT AVG(age) FROM visitor WHERE Level_of_membership <= 4"
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "context": "CREATE TABLE visitor (name VARCHAR, Level_of_membership INTEGER, age VARCHAR)",
        "answer": "SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC"
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "context": "CREATE TABLE museum (museum_id VARCHAR, name VARCHAR, num_of_staff VARCHAR)",
        "answer": "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "context": "CREATE TABLE museum (num_of_staff INTEGER, open_year INTEGER)",
        "answer": "SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009"
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "context": "CREATE TABLE museum (Num_of_Staff VARCHAR, Open_Year VARCHAR, name VARCHAR)",
        "answer": "SELECT Num_of_Staff, Open_Year FROM museum WHERE name = 'Plaza Museum'"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "context": "CREATE TABLE museum (name VARCHAR, num_of_staff INTEGER, open_year INTEGER)",
        "answer": "SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)"
    },
    {
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "context": "CREATE TABLE visit (visitor_id VARCHAR); CREATE TABLE visitor (id VARCHAR, name VARCHAR, age VARCHAR)",
        "answer": "SELECT t1.id, t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING COUNT(*) > 1"
    },
    {
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "context": "CREATE TABLE visit (visitor_id VARCHAR, Total_spent INTEGER); CREATE TABLE visitor (name VARCHAR, Level_of_membership VARCHAR, id VARCHAR)",
        "answer": "SELECT t2.visitor_id, t1.name, t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY SUM(t2.Total_spent) DESC LIMIT 1"
    },
    {
        "question": "What are the id and name of the museum visited most times?",
        "context": "CREATE TABLE museum (name VARCHAR, Museum_ID VARCHAR); CREATE TABLE visit (Museum_ID VARCHAR)",
        "answer": "SELECT t2.Museum_ID, t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the museum that had no visitor yet?",
        "context": "CREATE TABLE visit (name VARCHAR, Museum_ID VARCHAR, museum_id VARCHAR); CREATE TABLE museum (name VARCHAR, Museum_ID VARCHAR, museum_id VARCHAR)",
        "answer": "SELECT name FROM museum WHERE NOT Museum_ID IN (SELECT museum_id FROM visit)"
    },
    {
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "context": "CREATE TABLE visitor (name VARCHAR, age VARCHAR, id VARCHAR); CREATE TABLE visit (visitor_id VARCHAR, num_of_ticket VARCHAR)",
        "answer": "SELECT t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "context": "CREATE TABLE visit (num_of_ticket INTEGER)",
        "answer": "SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit"
    },
    {
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "context": "CREATE TABLE visit (Total_spent INTEGER, visitor_id VARCHAR); CREATE TABLE visitor (id VARCHAR, Level_of_membership VARCHAR)",
        "answer": "SELECT SUM(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1"
    },
    {
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "context": "CREATE TABLE visitor (name VARCHAR, id VARCHAR); CREATE TABLE museum (Museum_ID VARCHAR, open_year INTEGER); CREATE TABLE visit (visitor_id VARCHAR, Museum_ID VARCHAR)",
        "answer": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011"
    },
    {
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "context": "CREATE TABLE museum (Museum_ID VARCHAR, open_year INTEGER); CREATE TABLE visitor (id VARCHAR); CREATE TABLE visit (visitor_id VARCHAR, Museum_ID VARCHAR)",
        "answer": "SELECT COUNT(*) FROM visitor WHERE NOT id IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)"
    },
    {
        "question": "How many museums were opened after 2013 or before 2008?",
        "context": "CREATE TABLE museum (open_year VARCHAR)",
        "answer": "SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008"
    },
    {
        "question": "Find the total number of players.",
        "context": "CREATE TABLE players (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM players"
    },
    {
        "question": "How many players are there?",
        "context": "CREATE TABLE player (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM player"
    },
    {
        "question": "Find the total number of matches.",
        "context": "CREATE TABLE matches (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM matches"
    },
    {
        "question": "Find the total number of matches.",
        "context": "CREATE TABLE matches (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM matches"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "context": "CREATE TABLE players (first_name VARCHAR, birth_date VARCHAR, country_code VARCHAR)",
        "answer": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "context": "CREATE TABLE players (first_name VARCHAR, birth_date VARCHAR, country_code VARCHAR)",
        "answer": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
    },
    {
        "question": "Find the average age of losers and winners of all matches.",
        "context": "CREATE TABLE matches (loser_age INTEGER, winner_age INTEGER)",
        "answer": "SELECT AVG(loser_age), AVG(winner_age) FROM matches"
    },
    {
        "question": "Find the average age of losers and winners of all matches.",
        "context": "CREATE TABLE matches (loser_age INTEGER, winner_age INTEGER)",
        "answer": "SELECT AVG(loser_age), AVG(winner_age) FROM matches"
    },
    {
        "question": "Find the average rank of winners in all matches.",
        "context": "CREATE TABLE matches (winner_rank INTEGER)",
        "answer": "SELECT AVG(winner_rank) FROM matches"
    },
    {
        "question": "Find the average rank of winners in all matches.",
        "context": "CREATE TABLE matches (winner_rank INTEGER)",
        "answer": "SELECT AVG(winner_rank) FROM matches"
    },
    {
        "question": "Find the highest rank of losers in all matches.",
        "context": "CREATE TABLE matches (loser_rank INTEGER)",
        "answer": "SELECT MIN(loser_rank) FROM matches"
    },
    {
        "question": "Find the highest rank of losers in all matches.",
        "context": "CREATE TABLE matches (loser_rank INTEGER)",
        "answer": "SELECT MIN(loser_rank) FROM matches"
    },
    {
        "question": "find the number of distinct country codes of all players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT country_code) FROM players"
    },
    {
        "question": "find the number of distinct country codes of all players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT country_code) FROM players"
    },
    {
        "question": "Find the number of distinct name of losers.",
        "context": "CREATE TABLE matches (loser_name VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT loser_name) FROM matches"
    },
    {
        "question": "Find the number of distinct name of losers.",
        "context": "CREATE TABLE matches (loser_name VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT loser_name) FROM matches"
    },
    {
        "question": "Find the name of tourney that has more than 10 matches.",
        "context": "CREATE TABLE matches (tourney_name VARCHAR)",
        "answer": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
    },
    {
        "question": "Find the name of tourney that has more than 10 matches.",
        "context": "CREATE TABLE matches (tourney_name VARCHAR)",
        "answer": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016"
    },
    {
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016"
    },
    {
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016"
    },
    {
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "context": "CREATE TABLE matches (winner_id VARCHAR, tourney_name VARCHAR); CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR)",
        "answer": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'"
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "context": "CREATE TABLE matches (winner_id VARCHAR, tourney_name VARCHAR); CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR)",
        "answer": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "context": "CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "context": "CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "context": "CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, last_name FROM players ORDER BY birth_date"
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "context": "CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, last_name FROM players ORDER BY birth_date"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "context": "CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, hand VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date"
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "context": "CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, hand VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "context": "CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR, tours VARCHAR)",
        "answer": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "context": "CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR, tours VARCHAR)",
        "answer": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "question": "Find the year that has the most number of matches.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the year that has the most number of matches.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, loser_name VARCHAR, minutes VARCHAR)",
        "answer": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, loser_name VARCHAR, minutes VARCHAR)",
        "answer": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "context": "CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)",
        "answer": "SELECT AVG(ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name"
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "context": "CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)",
        "answer": "SELECT AVG(ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "context": "CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)",
        "answer": "SELECT SUM(ranking_points), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name"
    },
    {
        "question": "Find the total ranking points for each player and their first name.",
        "context": "CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)",
        "answer": "SELECT SUM(ranking_points), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name"
    },
    {
        "question": "find the number of players for each country.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT COUNT(*), country_code FROM players GROUP BY country_code"
    },
    {
        "question": "find the number of players for each country.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT COUNT(*), country_code FROM players GROUP BY country_code"
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "context": "CREATE TABLE players (country_code VARCHAR)",
        "answer": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
    },
    {
        "question": "Find the total number of tours for each ranking date.",
        "context": "CREATE TABLE rankings (ranking_date VARCHAR, tours INTEGER)",
        "answer": "SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "question": "Find the total number of tours for each ranking date.",
        "context": "CREATE TABLE rankings (ranking_date VARCHAR, tours INTEGER)",
        "answer": "SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "question": "Find the number of matches happened in each year.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*), YEAR FROM matches GROUP BY YEAR"
    },
    {
        "question": "Find the number of matches happened in each year.",
        "context": "CREATE TABLE matches (YEAR VARCHAR)",
        "answer": "SELECT COUNT(*), YEAR FROM matches GROUP BY YEAR"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, winner_rank VARCHAR, winner_age VARCHAR)",
        "answer": "SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "context": "CREATE TABLE matches (winner_name VARCHAR, winner_rank VARCHAR, winner_age VARCHAR)",
        "answer": "SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "context": "CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_hand VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'"
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "context": "CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_hand VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "context": "CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR, player_id VARCHAR); CREATE TABLE matches (winner_id VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "context": "CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR, player_id VARCHAR); CREATE TABLE matches (winner_id VARCHAR, winner_rank_points VARCHAR)",
        "answer": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "question": "Find the number of players for each hand type.",
        "context": "CREATE TABLE players (hand VARCHAR)",
        "answer": "SELECT COUNT(*), hand FROM players GROUP BY hand"
    },
    {
        "question": "Find the number of players for each hand type.",
        "context": "CREATE TABLE players (hand VARCHAR)",
        "answer": "SELECT COUNT(*), hand FROM players GROUP BY hand"
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "context": "CREATE TABLE ship (disposition_of_ship VARCHAR)",
        "answer": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'"
    },
    {
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "context": "CREATE TABLE ship (name VARCHAR, tonnage VARCHAR)",
        "answer": "SELECT name, tonnage FROM ship ORDER BY name DESC"
    },
    {
        "question": "List the name, date and result of each battle.",
        "context": "CREATE TABLE battle (name VARCHAR, date VARCHAR)",
        "answer": "SELECT name, date FROM battle"
    },
    {
        "question": "What is maximum and minimum death toll caused each time?",
        "context": "CREATE TABLE death (killed INTEGER)",
        "answer": "SELECT MAX(killed), MIN(killed) FROM death"
    },
    {
        "question": "What is the average number of injuries caused each time?",
        "context": "CREATE TABLE death (injured INTEGER)",
        "answer": "SELECT AVG(injured) FROM death"
    },
    {
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "context": "CREATE TABLE ship (Id VARCHAR); CREATE TABLE death (killed VARCHAR, injured VARCHAR, caused_by_ship_id VARCHAR)",
        "answer": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'"
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "context": "CREATE TABLE battle (name VARCHAR, RESULT VARCHAR, bulgarian_commander VARCHAR)",
        "answer": "SELECT name, RESULT FROM battle WHERE bulgarian_commander <> 'Boril'"
    },
    {
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "context": "CREATE TABLE ship (lost_in_battle VARCHAR, ship_type VARCHAR); CREATE TABLE battle (id VARCHAR, name VARCHAR)",
        "answer": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'"
    },
    {
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "context": "CREATE TABLE death (caused_by_ship_id VARCHAR, killed INTEGER); CREATE TABLE battle (id VARCHAR, name VARCHAR); CREATE TABLE ship (lost_in_battle VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING SUM(T3.killed) > 10"
    },
    {
        "question": "What is the ship id and name that caused most total injuries?",
        "context": "CREATE TABLE death (caused_by_ship_id VARCHAR); CREATE TABLE ship (Id VARCHAR)",
        "answer": "SELECT T2.id, T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "context": "CREATE TABLE battle (name VARCHAR, bulgarian_commander VARCHAR, latin_commander VARCHAR)",
        "answer": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'"
    },
    {
        "question": "How many different results are there for the battles?",
        "context": "CREATE TABLE battle (RESULT VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT RESULT) FROM battle"
    },
    {
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "context": "CREATE TABLE ship (id VARCHAR, lost_in_battle VARCHAR, tonnage VARCHAR); CREATE TABLE battle (id VARCHAR, lost_in_battle VARCHAR, tonnage VARCHAR)",
        "answer": "SELECT COUNT(*) FROM battle WHERE NOT id IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')"
    },
    {
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "context": "CREATE TABLE ship (lost_in_battle VARCHAR, name VARCHAR); CREATE TABLE battle (name VARCHAR, date VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'"
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "context": "CREATE TABLE ship (lost_in_battle VARCHAR, location VARCHAR); CREATE TABLE battle (name VARCHAR, RESULT VARCHAR, bulgarian_commander VARCHAR); CREATE TABLE battle (name VARCHAR, result VARCHAR, bulgarian_commander VARCHAR, id VARCHAR)",
        "answer": "SELECT name, RESULT, bulgarian_commander FROM battle EXCEPT SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'"
    },
    {
        "question": "What are the notes of the death events which has substring 'East'?",
        "context": "CREATE TABLE death (note VARCHAR)",
        "answer": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "context": "CREATE TABLE addresses (line_1 VARCHAR, line_2 VARCHAR)",
        "answer": "SELECT line_1, line_2 FROM addresses"
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "context": "CREATE TABLE addresses (line_1 VARCHAR, line_2 VARCHAR)",
        "answer": "SELECT line_1, line_2 FROM addresses"
    },
    {
        "question": "How many courses are there in total?",
        "context": "CREATE TABLE COURSES (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM COURSES"
    },
    {
        "question": "How many courses are there in total?",
        "context": "CREATE TABLE COURSES (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM COURSES"
    },
    {
        "question": "How is the math course described?",
        "context": "CREATE TABLE Courses (course_description VARCHAR, course_name VARCHAR)",
        "answer": "SELECT course_description FROM Courses WHERE course_name = 'math'"
    },
    {
        "question": "How is the math course described?",
        "context": "CREATE TABLE Courses (course_description VARCHAR, course_name VARCHAR)",
        "answer": "SELECT course_description FROM Courses WHERE course_name = 'math'"
    },
    {
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "context": "CREATE TABLE Addresses (zip_postcode VARCHAR, city VARCHAR)",
        "answer": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'"
    },
    {
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "context": "CREATE TABLE Addresses (zip_postcode VARCHAR, city VARCHAR)",
        "answer": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'"
    },
    {
        "question": "Which department offers the most number of degrees? List department name and id.",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_name VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T2.department_name, T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which department offers the most number of degrees? List department name and id.",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_name VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T2.department_name, T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "How many departments offer any degree?",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "question": "How many departments offer any degree?",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "question": "How many different degree names are offered?",
        "context": "CREATE TABLE Degree_Programs (degree_summary_name VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "question": "How many different degree names are offered?",
        "context": "CREATE TABLE Degree_Programs (degree_summary_name VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "question": "How many degrees does the engineering department offer?",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_id VARCHAR, department_name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'"
    },
    {
        "question": "How many degrees does the engineering department offer?",
        "context": "CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_id VARCHAR, department_name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'"
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "context": "CREATE TABLE Sections (section_name VARCHAR, section_description VARCHAR)",
        "answer": "SELECT section_name, section_description FROM Sections"
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "context": "CREATE TABLE Sections (section_name VARCHAR, section_description VARCHAR)",
        "answer": "SELECT section_name, section_description FROM Sections"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Sections (course_id VARCHAR)",
        "answer": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) <= 2"
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Sections (course_id VARCHAR)",
        "answer": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) <= 2"
    },
    {
        "question": "List the section_name in reversed lexicographical order.",
        "context": "CREATE TABLE Sections (section_name VARCHAR)",
        "answer": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "question": "List the section_name in reversed lexicographical order.",
        "context": "CREATE TABLE Sections (section_name VARCHAR)",
        "answer": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "context": "CREATE TABLE Student_Enrolment (semester_id VARCHAR); CREATE TABLE Semesters (semester_name VARCHAR, semester_id VARCHAR)",
        "answer": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "context": "CREATE TABLE Student_Enrolment (semester_id VARCHAR); CREATE TABLE Semesters (semester_name VARCHAR, semester_id VARCHAR)",
        "answer": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the description of the department whose name has the substring the computer?",
        "context": "CREATE TABLE Departments (department_description VARCHAR, department_name VARCHAR)",
        "answer": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "question": "What is the description of the department whose name has the substring the computer?",
        "context": "CREATE TABLE Departments (department_description VARCHAR, department_name VARCHAR)",
        "answer": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "context": "CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2"
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "context": "CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'"
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'"
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "context": "CREATE TABLE Student_Enrolment (degree_program_id VARCHAR); CREATE TABLE Degree_Programs (degree_summary_name VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "context": "CREATE TABLE Student_Enrolment (degree_program_id VARCHAR); CREATE TABLE Degree_Programs (degree_summary_name VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Student_Enrolment (degree_program_id VARCHAR)",
        "answer": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Student_Enrolment (degree_program_id VARCHAR)",
        "answer": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "context": "CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*), T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "context": "CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*), T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "context": "CREATE TABLE Student_Enrolment (semester_name VARCHAR, semester_id VARCHAR); CREATE TABLE Semesters (semester_name VARCHAR, semester_id VARCHAR)",
        "answer": "SELECT semester_name FROM Semesters WHERE NOT semester_id IN (SELECT semester_id FROM Student_Enrolment)"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id"
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)",
        "answer": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)",
        "answer": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (last_name VARCHAR, current_address_id VARCHAR); CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id"
    },
    {
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (last_name VARCHAR, current_address_id VARCHAR); CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)",
        "answer": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id"
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "context": "CREATE TABLE Transcript_Contents (transcript_id VARCHAR); CREATE TABLE Transcripts (transcript_date VARCHAR, transcript_id VARCHAR)",
        "answer": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "context": "CREATE TABLE Transcript_Contents (transcript_id VARCHAR); CREATE TABLE Transcripts (transcript_date VARCHAR, transcript_id VARCHAR)",
        "answer": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "context": "CREATE TABLE Students (cell_mobile_number VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'"
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "context": "CREATE TABLE Students (cell_mobile_number VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'"
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "context": "CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, date_first_registered VARCHAR)",
        "answer": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1"
    },
    {
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "context": "CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, date_left VARCHAR)",
        "answer": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left LIMIT 1"
    },
    {
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "context": "CREATE TABLE Students (first_name VARCHAR, current_address_id VARCHAR, permanent_address_id VARCHAR)",
        "answer": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, line_1 VARCHAR, line_2 VARCHAR); CREATE TABLE Students (current_address_id VARCHAR)",
        "answer": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, line_1 VARCHAR, line_2 VARCHAR); CREATE TABLE Students (current_address_id VARCHAR)",
        "answer": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "On average, when were the transcripts printed?",
        "context": "CREATE TABLE Transcripts (transcript_date INTEGER)",
        "answer": "SELECT AVG(transcript_date) FROM Transcripts"
    },
    {
        "question": "On average, when were the transcripts printed?",
        "context": "CREATE TABLE Transcripts (transcript_date INTEGER)",
        "answer": "SELECT AVG(transcript_date) FROM Transcripts"
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "context": "CREATE TABLE Transcripts (transcript_date VARCHAR, other_details VARCHAR)",
        "answer": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1"
    },
    {
        "question": "How many transcripts are released?",
        "context": "CREATE TABLE Transcripts (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Transcripts"
    },
    {
        "question": "How many transcripts are released?",
        "context": "CREATE TABLE Transcripts (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Transcripts"
    },
    {
        "question": "What is the last transcript release date?",
        "context": "CREATE TABLE Transcripts (transcript_date VARCHAR)",
        "answer": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "question": "What is the last transcript release date?",
        "context": "CREATE TABLE Transcripts (transcript_date VARCHAR)",
        "answer": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "context": "CREATE TABLE Transcript_Contents (student_course_id VARCHAR)",
        "answer": "SELECT COUNT(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "context": "CREATE TABLE Transcript_Contents (student_course_id VARCHAR)",
        "answer": "SELECT COUNT(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "context": "CREATE TABLE Transcript_Contents (transcript_id VARCHAR); CREATE TABLE Transcripts (transcript_date VARCHAR, transcript_id VARCHAR)",
        "answer": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR); CREATE TABLE Student_Enrolment (semester_id VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'"
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "context": "CREATE TABLE Degree_Programs (degree_program_id VARCHAR); CREATE TABLE Student_Enrolment (semester_id VARCHAR, degree_program_id VARCHAR)",
        "answer": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'"
    },
    {
        "question": "How many different addresses do the students currently live?",
        "context": "CREATE TABLE Students (current_address_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT current_address_id) FROM Students"
    },
    {
        "question": "How many different addresses do the students currently live?",
        "context": "CREATE TABLE Students (current_address_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT current_address_id) FROM Students"
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "context": "CREATE TABLE Students (other_student_details VARCHAR)",
        "answer": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "context": "CREATE TABLE Students (other_student_details VARCHAR)",
        "answer": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "question": "Describe the section h.",
        "context": "CREATE TABLE Sections (section_description VARCHAR, section_name VARCHAR)",
        "answer": "SELECT section_description FROM Sections WHERE section_name = 'h'"
    },
    {
        "question": "Describe the section h.",
        "context": "CREATE TABLE Sections (section_description VARCHAR, section_name VARCHAR)",
        "answer": "SELECT section_description FROM Sections WHERE section_name = 'h'"
    },
    {
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "context": "CREATE TABLE students (first_name VARCHAR, permanent_address_id VARCHAR, cell_mobile_number VARCHAR); CREATE TABLE addresses (address_id VARCHAR, country VARCHAR)",
        "answer": "SELECT t1.first_name FROM students AS t1 JOIN addresses AS t2 ON t1.permanent_address_id = t2.address_id WHERE t2.country = 'haiti' OR t1.cell_mobile_number = '09700166582'"
    },
    {
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "context": "CREATE TABLE students (first_name VARCHAR, permanent_address_id VARCHAR, cell_mobile_number VARCHAR); CREATE TABLE addresses (address_id VARCHAR, country VARCHAR)",
        "answer": "SELECT t1.first_name FROM students AS t1 JOIN addresses AS t2 ON t1.permanent_address_id = t2.address_id WHERE t2.country = 'haiti' OR t1.cell_mobile_number = '09700166582'"
    },
    {
        "question": "List the title of all cartoons in alphabetical order.",
        "context": "CREATE TABLE Cartoon (Title VARCHAR, title VARCHAR)",
        "answer": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "question": "List the title of all cartoons in alphabetical order.",
        "context": "CREATE TABLE Cartoon (Title VARCHAR, title VARCHAR)",
        "answer": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "context": "CREATE TABLE Cartoon (Title VARCHAR, Directed_by VARCHAR)",
        "answer": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""
    },
    {
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "context": "CREATE TABLE Cartoon (Written_by VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "context": "CREATE TABLE Cartoon (title VARCHAR, Directed_by VARCHAR, Original_air_date VARCHAR)",
        "answer": "SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "context": "CREATE TABLE Cartoon (title VARCHAR, Directed_by VARCHAR, Original_air_date VARCHAR)",
        "answer": "SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "context": "CREATE TABLE Cartoon (Title VARCHAR, Directed_by VARCHAR)",
        "answer": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\""
    },
    {
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "context": "CREATE TABLE TV_Channel (Country VARCHAR)",
        "answer": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table.",
        "context": "CREATE TABLE TV_Channel (series_name VARCHAR, content VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel"
    },
    {
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "context": "CREATE TABLE TV_Channel (Content VARCHAR, series_name VARCHAR)",
        "answer": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""
    },
    {
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "context": "CREATE TABLE TV_Channel (Package_Option VARCHAR, series_name VARCHAR)",
        "answer": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""
    },
    {
        "question": "How many TV Channel using language English?",
        "context": "CREATE TABLE TV_Channel (LANGUAGE VARCHAR)",
        "answer": "SELECT COUNT(*) FROM TV_Channel WHERE LANGUAGE = \"English\""
    },
    {
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "context": "CREATE TABLE TV_Channel (LANGUAGE VARCHAR)",
        "answer": "SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "List each language and the number of TV Channels using it.",
        "context": "CREATE TABLE TV_Channel (LANGUAGE VARCHAR)",
        "answer": "SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "question": "List each language and the number of TV Channels using it.",
        "context": "CREATE TABLE TV_Channel (LANGUAGE VARCHAR)",
        "answer": "SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "context": "CREATE TABLE Cartoon (Channel VARCHAR, Title VARCHAR); CREATE TABLE TV_Channel (series_name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""
    },
    {
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "context": "CREATE TABLE Cartoon (Title VARCHAR, Channel VARCHAR); CREATE TABLE TV_Channel (id VARCHAR, series_name VARCHAR)",
        "answer": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "context": "CREATE TABLE TV_series (Episode VARCHAR, rating VARCHAR)",
        "answer": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "context": "CREATE TABLE TV_series (Episode VARCHAR, rating VARCHAR)",
        "answer": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "context": "CREATE TABLE TV_series (Episode VARCHAR, Rating VARCHAR)",
        "answer": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
    },
    {
        "question": "What is minimum and maximum share of TV series?",
        "context": "CREATE TABLE TV_series (SHARE INTEGER)",
        "answer": "SELECT MAX(SHARE), MIN(SHARE) FROM TV_series"
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "CREATE TABLE TV_series (Air_Date VARCHAR, Episode VARCHAR)",
        "answer": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""
    },
    {
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "CREATE TABLE TV_series (Weekly_Rank VARCHAR, Episode VARCHAR)",
        "answer": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""
    },
    {
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "context": "CREATE TABLE TV_series (Channel VARCHAR, Episode VARCHAR); CREATE TABLE TV_Channel (series_name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""
    },
    {
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "context": "CREATE TABLE TV_Channel (id VARCHAR, series_name VARCHAR); CREATE TABLE TV_series (Episode VARCHAR, Channel VARCHAR)",
        "answer": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "context": "CREATE TABLE cartoon (Directed_by VARCHAR)",
        "answer": "SELECT COUNT(*), Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "context": "CREATE TABLE cartoon (Directed_by VARCHAR)",
        "answer": "SELECT COUNT(*), Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "context": "CREATE TABLE cartoon (production_code VARCHAR, channel VARCHAR, original_air_date VARCHAR)",
        "answer": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1"
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "context": "CREATE TABLE cartoon (production_code VARCHAR, channel VARCHAR, original_air_date VARCHAR)",
        "answer": "SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1"
    },
    {
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "context": "CREATE TABLE TV_Channel (package_option VARCHAR, series_name VARCHAR, hight_definition_TV VARCHAR)",
        "answer": "SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\""
    },
    {
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "context": "CREATE TABLE TV_Channel (package_option VARCHAR, series_name VARCHAR, hight_definition_TV VARCHAR)",
        "answer": "SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\""
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "context": "CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)",
        "answer": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'"
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "context": "CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)",
        "answer": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'"
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "context": "CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE TV_Channel (country VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)",
        "answer": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'"
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "context": "CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE TV_Channel (country VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)",
        "answer": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "context": "CREATE TABLE TV_Channel (series_name VARCHAR, country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'"
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "context": "CREATE TABLE TV_Channel (series_name VARCHAR, country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'"
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "context": "CREATE TABLE tv_channel (Pixel_aspect_ratio_PAR VARCHAR, country VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE <> 'English'"
    },
    {
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "context": "CREATE TABLE tv_channel (id VARCHAR, country VARCHAR)",
        "answer": "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2"
    },
    {
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "context": "CREATE TABLE tv_channel (id VARCHAR, country VARCHAR)",
        "answer": "SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "context": "CREATE TABLE TV_Channel (id VARCHAR, channel VARCHAR, directed_by VARCHAR); CREATE TABLE cartoon (id VARCHAR, channel VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'"
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "context": "CREATE TABLE TV_Channel (id VARCHAR, channel VARCHAR, directed_by VARCHAR); CREATE TABLE cartoon (id VARCHAR, channel VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'"
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "context": "CREATE TABLE cartoon (package_option VARCHAR, id VARCHAR, channel VARCHAR, directed_by VARCHAR); CREATE TABLE TV_Channel (package_option VARCHAR, id VARCHAR, channel VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT package_option FROM TV_Channel WHERE NOT id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')"
    },
    {
        "question": "How many poker players are there?",
        "context": "CREATE TABLE poker_player (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM poker_player"
    },
    {
        "question": "How many poker players are there?",
        "context": "CREATE TABLE poker_player (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM poker_player"
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "context": "CREATE TABLE poker_player (Earnings VARCHAR)",
        "answer": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "context": "CREATE TABLE poker_player (Earnings VARCHAR)",
        "answer": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "question": "List the final tables made and the best finishes of poker players.",
        "context": "CREATE TABLE poker_player (Final_Table_Made VARCHAR, Best_Finish VARCHAR)",
        "answer": "SELECT Final_Table_Made, Best_Finish FROM poker_player"
    },
    {
        "question": "List the final tables made and the best finishes of poker players.",
        "context": "CREATE TABLE poker_player (Final_Table_Made VARCHAR, Best_Finish VARCHAR)",
        "answer": "SELECT Final_Table_Made, Best_Finish FROM poker_player"
    },
    {
        "question": "What is the average earnings of poker players?",
        "context": "CREATE TABLE poker_player (Earnings INTEGER)",
        "answer": "SELECT AVG(Earnings) FROM poker_player"
    },
    {
        "question": "What is the average earnings of poker players?",
        "context": "CREATE TABLE poker_player (Earnings INTEGER)",
        "answer": "SELECT AVG(Earnings) FROM poker_player"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "context": "CREATE TABLE poker_player (Money_Rank VARCHAR, Earnings VARCHAR)",
        "answer": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "context": "CREATE TABLE poker_player (Money_Rank VARCHAR, Earnings VARCHAR)",
        "answer": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "context": "CREATE TABLE poker_player (Final_Table_Made INTEGER, Earnings INTEGER)",
        "answer": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "context": "CREATE TABLE poker_player (Final_Table_Made INTEGER, Earnings INTEGER)",
        "answer": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
    },
    {
        "question": "What are the names of poker players?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID"
    },
    {
        "question": "What are the names of poker players?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID"
    },
    {
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Earnings INTEGER); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000"
    },
    {
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Earnings INTEGER); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000"
    },
    {
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Final_Table_Made VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Final_Table_Made VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Earnings VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height VARCHAR); CREATE TABLE poker_player (Money_Rank VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height VARCHAR); CREATE TABLE poker_player (Money_Rank VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "question": "What is the average earnings of poker players with height higher than 200?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE poker_player (Earnings INTEGER, People_ID VARCHAR)",
        "answer": "SELECT AVG(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200"
    },
    {
        "question": "What is the average earnings of poker players with height higher than 200?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE poker_player (Earnings INTEGER, People_ID VARCHAR)",
        "answer": "SELECT AVG(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200"
    },
    {
        "question": "What are the names of poker players in descending order of earnings?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Earnings VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "question": "What are the names of poker players in descending order of earnings?",
        "context": "CREATE TABLE poker_player (People_ID VARCHAR, Earnings VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "question": "What is the most common nationality of people?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the most common nationality of people?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What are the nationalities that are shared by at least two people?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
    },
    {
        "question": "What are the nationalities that are shared by at least two people?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
    },
    {
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "context": "CREATE TABLE people (Name VARCHAR, Birth_Date VARCHAR)",
        "answer": "SELECT Name, Birth_Date FROM people ORDER BY Name"
    },
    {
        "question": "Show names of people whose nationality is not \"Russia\".",
        "context": "CREATE TABLE people (Name VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT Name FROM people WHERE Nationality <> \"Russia\""
    },
    {
        "question": "List the names of people that are not poker players.",
        "context": "CREATE TABLE poker_player (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM poker_player)"
    },
    {
        "question": "How many distinct nationalities are there?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Nationality) FROM people"
    },
    {
        "question": "How many distinct nationalities are there?",
        "context": "CREATE TABLE people (Nationality VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Nationality) FROM people"
    },
    {
        "question": "How many states are there?",
        "context": "CREATE TABLE area_code_state (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM area_code_state"
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "context": "CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)",
        "answer": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "question": "List the vote ids, phone numbers and states of all votes.",
        "context": "CREATE TABLE votes (vote_id VARCHAR, phone_number VARCHAR, state VARCHAR)",
        "answer": "SELECT vote_id, phone_number, state FROM votes"
    },
    {
        "question": "What are the maximum and minimum values of area codes?",
        "context": "CREATE TABLE area_code_state (area_code INTEGER)",
        "answer": "SELECT MAX(area_code), MIN(area_code) FROM area_code_state"
    },
    {
        "question": "What is last date created of votes from the state 'CA'?",
        "context": "CREATE TABLE votes (created INTEGER, state VARCHAR)",
        "answer": "SELECT MAX(created) FROM votes WHERE state = 'CA'"
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "context": "CREATE TABLE contestants (contestant_name VARCHAR)",
        "answer": "SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'"
    },
    {
        "question": "What are the distinct states and create time of all votes?",
        "context": "CREATE TABLE votes (state VARCHAR, created VARCHAR)",
        "answer": "SELECT DISTINCT state, created FROM votes"
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "context": "CREATE TABLE votes (contestant_number VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)",
        "answer": "SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2"
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "context": "CREATE TABLE votes (contestant_number VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)",
        "answer": "SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "context": "CREATE TABLE votes (state VARCHAR)",
        "answer": "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'"
    },
    {
        "question": "How many contestants did not get voted?",
        "context": "CREATE TABLE contestants (contestant_number VARCHAR); CREATE TABLE votes (contestant_number VARCHAR)",
        "answer": "SELECT COUNT(*) FROM contestants WHERE NOT contestant_number IN (SELECT contestant_number FROM votes)"
    },
    {
        "question": "What is the area code in which the most voters voted?",
        "context": "CREATE TABLE area_code_state (area_code VARCHAR, state VARCHAR); CREATE TABLE votes (state VARCHAR)",
        "answer": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "context": "CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR); CREATE TABLE votes (created VARCHAR, state VARCHAR, phone_number VARCHAR, contestant_number VARCHAR)",
        "answer": "SELECT T2.created, T2.state, T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'"
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "context": "CREATE TABLE votes (contestant_number VARCHAR, state VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR); CREATE TABLE area_code_state (area_code VARCHAR, state VARCHAR)",
        "answer": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'"
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "context": "CREATE TABLE contestants (contestant_name VARCHAR)",
        "answer": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%al%\""
    },
    {
        "question": "What are the names of all the countries that became independent after 1950?",
        "context": "CREATE TABLE country (Name VARCHAR, IndepYear INTEGER)",
        "answer": "SELECT Name FROM country WHERE IndepYear > 1950"
    },
    {
        "question": "What are the names of all the countries that became independent after 1950?",
        "context": "CREATE TABLE country (Name VARCHAR, IndepYear INTEGER)",
        "answer": "SELECT Name FROM country WHERE IndepYear > 1950"
    },
    {
        "question": "How many countries have a republic as their form of government?",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country WHERE GovernmentForm = \"Republic\""
    },
    {
        "question": "How many countries have a republic as their form of government?",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country WHERE GovernmentForm = \"Republic\""
    },
    {
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "context": "CREATE TABLE country (SurfaceArea INTEGER, Region VARCHAR)",
        "answer": "SELECT SUM(SurfaceArea) FROM country WHERE Region = \"Caribbean\""
    },
    {
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "context": "CREATE TABLE country (SurfaceArea INTEGER, Region VARCHAR)",
        "answer": "SELECT SUM(SurfaceArea) FROM country WHERE Region = \"Caribbean\""
    },
    {
        "question": "Which continent is Anguilla in?",
        "context": "CREATE TABLE country (Continent VARCHAR, Name VARCHAR)",
        "answer": "SELECT Continent FROM country WHERE Name = \"Anguilla\""
    },
    {
        "question": "Which continent is Anguilla in?",
        "context": "CREATE TABLE country (Continent VARCHAR, Name VARCHAR)",
        "answer": "SELECT Continent FROM country WHERE Name = \"Anguilla\""
    },
    {
        "question": "Which region is the city Kabul located in?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE city (CountryCode VARCHAR, Name VARCHAR)",
        "answer": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\""
    },
    {
        "question": "Which region is the city Kabul located in?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE city (CountryCode VARCHAR, Name VARCHAR)",
        "answer": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\""
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "context": "CREATE TABLE country (Population VARCHAR, LifeExpectancy VARCHAR, Name VARCHAR)",
        "answer": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\""
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "context": "CREATE TABLE country (Population VARCHAR, LifeExpectancy VARCHAR, Name VARCHAR)",
        "answer": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\""
    },
    {
        "question": "What are the region and population of Angola?",
        "context": "CREATE TABLE country (Population VARCHAR, Region VARCHAR, Name VARCHAR)",
        "answer": "SELECT Population, Region FROM country WHERE Name = \"Angola\""
    },
    {
        "question": "What are the region and population of Angola?",
        "context": "CREATE TABLE country (Population VARCHAR, Region VARCHAR, Name VARCHAR)",
        "answer": "SELECT Population, Region FROM country WHERE Name = \"Angola\""
    },
    {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "context": "CREATE TABLE country (LifeExpectancy INTEGER, Region VARCHAR)",
        "answer": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = \"Central Africa\""
    },
    {
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "context": "CREATE TABLE country (LifeExpectancy INTEGER, Region VARCHAR)",
        "answer": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = \"Central Africa\""
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, LifeExpectancy VARCHAR)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, LifeExpectancy VARCHAR)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "context": "CREATE TABLE country (Population INTEGER, GNP INTEGER, Continent VARCHAR)",
        "answer": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = \"Asia\""
    },
    {
        "question": "What is the total population and maximum GNP in Asia?",
        "context": "CREATE TABLE country (Population INTEGER, GNP INTEGER, Continent VARCHAR)",
        "answer": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = \"Asia\""
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "context": "CREATE TABLE country (LifeExpectancy INTEGER, Continent VARCHAR, GovernmentForm VARCHAR)",
        "answer": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\""
    },
    {
        "question": "What is the average life expectancy in African countries that are republics?",
        "context": "CREATE TABLE country (LifeExpectancy INTEGER, Continent VARCHAR, GovernmentForm VARCHAR)",
        "answer": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\""
    },
    {
        "question": "What is the total surface area of the continents Asia and Europe?",
        "context": "CREATE TABLE country (SurfaceArea INTEGER, Continent VARCHAR)",
        "answer": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\""
    },
    {
        "question": "What is the total surface area of the continents Asia and Europe?",
        "context": "CREATE TABLE country (SurfaceArea INTEGER, Continent VARCHAR)",
        "answer": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\""
    },
    {
        "question": "How many people live in Gelderland district?",
        "context": "CREATE TABLE city (Population INTEGER, District VARCHAR)",
        "answer": "SELECT SUM(Population) FROM city WHERE District = \"Gelderland\""
    },
    {
        "question": "How many people live in Gelderland district?",
        "context": "CREATE TABLE city (Population INTEGER, District VARCHAR)",
        "answer": "SELECT SUM(Population) FROM city WHERE District = \"Gelderland\""
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "context": "CREATE TABLE country (GNP INTEGER, population INTEGER, GovernmentForm VARCHAR)",
        "answer": "SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = \"US Territory\""
    },
    {
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "context": "CREATE TABLE country (GNP INTEGER, population INTEGER, GovernmentForm VARCHAR)",
        "answer": "SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = \"US Territory\""
    },
    {
        "question": "How many unique languages are spoken in the world?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "question": "How many unique languages are spoken in the world?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "question": "How many type of governments are in Africa?",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR, Continent VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\""
    },
    {
        "question": "How many type of governments are in Africa?",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR, Continent VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\""
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\""
    },
    {
        "question": "What is the total number of languages used in Aruba?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\""
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\""
    },
    {
        "question": "How many official languages does Afghanistan have?",
        "context": "CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\""
    },
    {
        "question": "What is name of the country that speaks the largest number of languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is name of the country that speaks the largest number of languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Continent VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which continent has the most diverse languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Continent VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")"
    },
    {
        "question": "How many countries speak both English and Dutch?",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")"
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\""
    },
    {
        "question": "What are the names of nations speak both English and French?",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\""
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What are the names of nations where both English and French are official languages?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\""
    },
    {
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\""
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR); CREATE TABLE country (Region VARCHAR, Code VARCHAR)",
        "answer": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\""
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR); CREATE TABLE country (Region VARCHAR, Code VARCHAR)",
        "answer": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\""
    },
    {
        "question": "What are the countries where either English or Dutch is the official language ?",
        "context": "CREATE TABLE countrylanguage (countrycode VARCHAR, language VARCHAR); CREATE TABLE country (name VARCHAR, code VARCHAR)",
        "answer": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"english\" AND isofficial = \"t\" UNION SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"dutch\" AND isofficial = \"t\""
    },
    {
        "question": "Which countries have either English or Dutch as an official language?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\""
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "context": "CREATE TABLE country (Code VARCHAR, Continent VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "context": "CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR); CREATE TABLE country (Code VARCHAR, GovernmentForm VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1"
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "context": "CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR); CREATE TABLE country (Code VARCHAR, GovernmentForm VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "context": "CREATE TABLE city (Name VARCHAR, Population VARCHAR, CountryCode VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "context": "CREATE TABLE city (Name VARCHAR, Population VARCHAR, CountryCode VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)",
        "answer": "SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, Population VARCHAR, LifeExpectancy VARCHAR, Continent VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, Population VARCHAR, LifeExpectancy VARCHAR, Continent VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (LifeExpectancy INTEGER, Name VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)",
        "answer": "SELECT AVG(LifeExpectancy) FROM country WHERE NOT Name IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")"
    },
    {
        "question": "What is the total number of people living in the nations that do not use English?",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR); CREATE TABLE country (Population INTEGER, Name VARCHAR)",
        "answer": "SELECT SUM(Population) FROM country WHERE NOT Name IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")"
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "context": "CREATE TABLE country (Code VARCHAR, HeadOfState VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "context": "CREATE TABLE country (Code VARCHAR, HeadOfState VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)",
        "answer": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "context": "CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\""
    },
    {
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea INTEGER, Continent VARCHAR)",
        "answer": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MIN(SurfaceArea) FROM country WHERE Continent = \"Europe\")"
    },
    {
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea INTEGER, Continent VARCHAR)",
        "answer": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MIN(SurfaceArea) FROM country WHERE Continent = \"Europe\")"
    },
    {
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT MAX(population) FROM country WHERE Continent = \"Asia\")"
    },
    {
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT MIN(population) FROM country WHERE Continent = \"Asia\")"
    },
    {
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT MAX(population) FROM country WHERE Continent = \"Africa\")"
    },
    {
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "context": "CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)",
        "answer": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT MIN(population) FROM country WHERE Continent = \"Africa\")"
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\""
    },
    {
        "question": "What are the country codes for countries that do not speak English?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\""
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE <> \"English\""
    },
    {
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "context": "CREATE TABLE countrylanguage (Code VARCHAR, CountryCode VARCHAR, GovernmentForm VARCHAR, LANGUAGE VARCHAR); CREATE TABLE country (Code VARCHAR, CountryCode VARCHAR, GovernmentForm VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT Code FROM country WHERE GovernmentForm <> \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\""
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "context": "CREATE TABLE city (Name VARCHAR, CountryCode VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, IsOfficial VARCHAR, Language VARCHAR); CREATE TABLE country (Code VARCHAR, Continent VARCHAR, Name VARCHAR)",
        "answer": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND NOT T1.Name IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')"
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "context": "CREATE TABLE city (name VARCHAR, countrycode VARCHAR); CREATE TABLE countrylanguage (countrycode VARCHAR, isofficial VARCHAR, language VARCHAR); CREATE TABLE country (code VARCHAR, continent VARCHAR)",
        "answer": "SELECT DISTINCT t3.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode WHERE t2.isofficial = 't' AND t2.language = 'chinese' AND t1.continent = \"asia\""
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "context": "CREATE TABLE city (name VARCHAR, countrycode VARCHAR); CREATE TABLE countrylanguage (countrycode VARCHAR, isofficial VARCHAR, language VARCHAR); CREATE TABLE country (code VARCHAR, continent VARCHAR)",
        "answer": "SELECT DISTINCT t3.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode WHERE t2.isofficial = 't' AND t2.language = 'chinese' AND t1.continent = \"asia\""
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR, IndepYear VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name, SurfaceArea, IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR, IndepYear VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name, SurfaceArea, IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, population VARCHAR, HeadOfState VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, population VARCHAR, HeadOfState VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT COUNT(T2.Language), T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2"
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "context": "CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)",
        "answer": "SELECT COUNT(T2.Language), T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2"
    },
    {
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "context": "CREATE TABLE city (District VARCHAR, Population INTEGER)",
        "answer": "SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District"
    },
    {
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "context": "CREATE TABLE city (District VARCHAR, Population INTEGER)",
        "answer": "SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR, Population INTEGER, LifeExpectancy INTEGER)",
        "answer": "SELECT SUM(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72"
    },
    {
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "context": "CREATE TABLE country (GovernmentForm VARCHAR, Population INTEGER, LifeExpectancy INTEGER)",
        "answer": "SELECT SUM(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "context": "CREATE TABLE country (Continent VARCHAR, Population INTEGER, LifeExpectancy INTEGER)",
        "answer": "SELECT SUM(Population), AVG(LifeExpectancy), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72"
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "context": "CREATE TABLE country (Continent VARCHAR, Population INTEGER, LifeExpectancy INTEGER)",
        "answer": "SELECT SUM(Population), AVG(LifeExpectancy), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72"
    },
    {
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "context": "CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR)",
        "answer": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "context": "CREATE TABLE country (Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "context": "CREATE TABLE country (Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations?",
        "context": "CREATE TABLE country (Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM country ORDER BY Population LIMIT 3"
    },
    {
        "question": "how many countries are in Asia?",
        "context": "CREATE TABLE country (continent VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country WHERE continent = \"Asia\""
    },
    {
        "question": "how many countries are in Asia?",
        "context": "CREATE TABLE country (continent VARCHAR)",
        "answer": "SELECT COUNT(*) FROM country WHERE continent = \"Asia\""
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "context": "CREATE TABLE country (Name VARCHAR, continent VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\""
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "context": "CREATE TABLE country (Name VARCHAR, continent VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\""
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "context": "CREATE TABLE country (population INTEGER, surfacearea INTEGER, continent VARCHAR)",
        "answer": "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = \"north america\" AND surfacearea > 3000"
    },
    {
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "context": "CREATE TABLE country (population INTEGER, surfacearea INTEGER, continent VARCHAR)",
        "answer": "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = \"north america\" AND surfacearea > 3000"
    },
    {
        "question": "What are the cities whose population is between 160000 and 900000?",
        "context": "CREATE TABLE city (name VARCHAR, Population INTEGER)",
        "answer": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "question": "What are the cities whose population is between 160000 and 900000?",
        "context": "CREATE TABLE city (name VARCHAR, Population INTEGER)",
        "answer": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR)",
        "answer": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR)",
        "answer": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR, CountryCode VARCHAR, Percentage INTEGER)",
        "answer": "SELECT LANGUAGE, CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "context": "CREATE TABLE countrylanguage (LANGUAGE VARCHAR, CountryCode VARCHAR, Percentage INTEGER)",
        "answer": "SELECT LANGUAGE, CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "context": "CREATE TABLE countrylanguage (Percentage INTEGER, CountryCode VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT COUNT(*), MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode"
    },
    {
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "context": "CREATE TABLE countrylanguage (Percentage INTEGER, CountryCode VARCHAR, LANGUAGE VARCHAR)",
        "answer": "SELECT COUNT(*), MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Percentage INTEGER, LANGUAGE VARCHAR)",
        "answer": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode"
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "context": "CREATE TABLE countrylanguage (CountryCode VARCHAR, Percentage INTEGER, LANGUAGE VARCHAR)",
        "answer": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode"
    },
    {
        "question": "How many conductors are there?",
        "context": "CREATE TABLE conductor (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM conductor"
    },
    {
        "question": "How many conductors are there?",
        "context": "CREATE TABLE conductor (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM conductor"
    },
    {
        "question": "List the names of conductors in ascending order of age.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM conductor ORDER BY Age"
    },
    {
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "context": "CREATE TABLE conductor (Name VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT Name FROM conductor WHERE Nationality <> 'USA'"
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded VARCHAR)",
        "answer": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded VARCHAR)",
        "answer": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "question": "What is the average attendance of shows?",
        "context": "CREATE TABLE SHOW (Attendance INTEGER)",
        "answer": "SELECT AVG(Attendance) FROM SHOW"
    },
    {
        "question": "What is the average attendance of shows?",
        "context": "CREATE TABLE SHOW (Attendance INTEGER)",
        "answer": "SELECT AVG(Attendance) FROM SHOW"
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "context": "CREATE TABLE performance (SHARE INTEGER, TYPE VARCHAR)",
        "answer": "SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE <> \"Live final\""
    },
    {
        "question": "How many different nationalities do conductors have?",
        "context": "CREATE TABLE conductor (Nationality VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Nationality) FROM conductor"
    },
    {
        "question": "How many different nationalities do conductors have?",
        "context": "CREATE TABLE conductor (Nationality VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Nationality) FROM conductor"
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)",
        "answer": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)",
        "answer": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)",
        "answer": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)",
        "answer": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR); CREATE TABLE orchestra (Orchestra VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID"
    },
    {
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "context": "CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR); CREATE TABLE orchestra (Orchestra VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID"
    },
    {
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1"
    },
    {
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1"
    },
    {
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008"
    },
    {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "context": "CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008"
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR)",
        "answer": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR)",
        "answer": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "context": "CREATE TABLE orchestra (Major_Record_Format VARCHAR)",
        "answer": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*)"
    },
    {
        "question": "List the record company shared by the most number of orchestras.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR)",
        "answer": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the record company shared by the most number of orchestras.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR)",
        "answer": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the names of orchestras that have no performance.",
        "context": "CREATE TABLE orchestra (Orchestra VARCHAR, Orchestra_ID VARCHAR); CREATE TABLE performance (Orchestra VARCHAR, Orchestra_ID VARCHAR)",
        "answer": "SELECT Orchestra FROM orchestra WHERE NOT Orchestra_ID IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded INTEGER)",
        "answer": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003"
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "context": "CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded INTEGER)",
        "answer": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003"
    },
    {
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "context": "CREATE TABLE orchestra (Major_Record_Format VARCHAR)",
        "answer": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\""
    },
    {
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "context": "CREATE TABLE orchestra (Major_Record_Format VARCHAR)",
        "answer": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\""
    },
    {
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "context": "CREATE TABLE performance (Orchestra_ID VARCHAR); CREATE TABLE orchestra (Orchestra_ID VARCHAR)",
        "answer": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1"
    },
    {
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "context": "CREATE TABLE performance (Orchestra_ID VARCHAR); CREATE TABLE orchestra (Orchestra_ID VARCHAR)",
        "answer": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1"
    },
    {
        "question": "How many high schoolers are there?",
        "context": "CREATE TABLE Highschooler (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Highschooler"
    },
    {
        "question": "How many high schoolers are there?",
        "context": "CREATE TABLE Highschooler (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Highschooler"
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)",
        "answer": "SELECT name, grade FROM Highschooler"
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)",
        "answer": "SELECT name, grade FROM Highschooler"
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler"
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler"
    },
    {
        "question": "What grade is Kyle in?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR, name VARCHAR)",
        "answer": "SELECT grade FROM Highschooler WHERE name = \"Kyle\""
    },
    {
        "question": "What grade is Kyle in?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR, name VARCHAR)",
        "answer": "SELECT grade FROM Highschooler WHERE name = \"Kyle\""
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)",
        "answer": "SELECT name FROM Highschooler WHERE grade = 10"
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)",
        "answer": "SELECT name FROM Highschooler WHERE grade = 10"
    },
    {
        "question": "Show the ID of the high schooler named Kyle.",
        "context": "CREATE TABLE Highschooler (ID VARCHAR, name VARCHAR)",
        "answer": "SELECT ID FROM Highschooler WHERE name = \"Kyle\""
    },
    {
        "question": "Show the ID of the high schooler named Kyle.",
        "context": "CREATE TABLE Highschooler (ID VARCHAR, name VARCHAR)",
        "answer": "SELECT ID FROM Highschooler WHERE name = \"Kyle\""
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10"
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10"
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"
    },
    {
        "question": "Which grade has the most high schoolers?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which grade has the most high schoolers?",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "context": "CREATE TABLE Highschooler (grade VARCHAR)",
        "answer": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
    },
    {
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "context": "CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id"
    },
    {
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "context": "CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id"
    },
    {
        "question": "Show the names of high school students and their corresponding number of friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id"
    },
    {
        "question": "Show the names of high school students and their corresponding number of friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id"
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 3"
    },
    {
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 3"
    },
    {
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, friend_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, friend_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "How many friends does the high school student Kyle have?",
        "context": "CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "How many friends does the high school student Kyle have?",
        "context": "CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "Show ids of all students who do not have any friends.",
        "context": "CREATE TABLE Highschooler (id VARCHAR, student_id VARCHAR); CREATE TABLE Friend (id VARCHAR, student_id VARCHAR)",
        "answer": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "question": "Show ids of all students who do not have any friends.",
        "context": "CREATE TABLE Highschooler (id VARCHAR, student_id VARCHAR); CREATE TABLE Friend (id VARCHAR, student_id VARCHAR)",
        "answer": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "question": "Show names of all high school students who do not have any friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Highschooler (name VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id"
    },
    {
        "question": "Show names of all high school students who do not have any friends.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Highschooler (name VARCHAR); CREATE TABLE Friend (student_id VARCHAR)",
        "answer": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id"
    },
    {
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "context": "CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)",
        "answer": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "context": "CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)",
        "answer": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id"
    },
    {
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "context": "CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id"
    },
    {
        "question": "Count the number of likes for each student id.",
        "context": "CREATE TABLE Likes (student_id VARCHAR)",
        "answer": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id"
    },
    {
        "question": "Count the number of likes for each student id.",
        "context": "CREATE TABLE Likes (student_id VARCHAR)",
        "answer": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id"
    },
    {
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id"
    },
    {
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name, COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id"
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show the names of students who have at least 2 likes.",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show the names of students who have at least 2 likes.",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "context": "CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR, grade INTEGER)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "context": "CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR, grade INTEGER)",
        "answer": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "How many likes does Kyle have?",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "How many likes does Kyle have?",
        "context": "CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\""
    },
    {
        "question": "Find the average grade of all students who have some friends.",
        "context": "CREATE TABLE Highschooler (id VARCHAR); CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (grade INTEGER, id VARCHAR)",
        "answer": "SELECT AVG(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)"
    },
    {
        "question": "Find the average grade of all students who have some friends.",
        "context": "CREATE TABLE Highschooler (id VARCHAR); CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (grade INTEGER, id VARCHAR)",
        "answer": "SELECT AVG(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)"
    },
    {
        "question": "Find the minimum grade of students who have no friends.",
        "context": "CREATE TABLE Highschooler (id VARCHAR); CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (grade INTEGER, id VARCHAR)",
        "answer": "SELECT MIN(grade) FROM Highschooler WHERE NOT id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "context": "CREATE TABLE Owners (state VARCHAR); CREATE TABLE Professionals (state VARCHAR)",
        "answer": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "question": "Which states have both owners and professionals living there?",
        "context": "CREATE TABLE Owners (state VARCHAR); CREATE TABLE Professionals (state VARCHAR)",
        "answer": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "context": "CREATE TABLE Dogs (age INTEGER, dog_id VARCHAR); CREATE TABLE Treatments (age INTEGER, dog_id VARCHAR)",
        "answer": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
    },
    {
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "context": "CREATE TABLE Dogs (age INTEGER, dog_id VARCHAR); CREATE TABLE Treatments (age INTEGER, dog_id VARCHAR)",
        "answer": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
    },
    {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR, state VARCHAR)",
        "answer": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) > 2"
    },
    {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR, state VARCHAR)",
        "answer": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) > 2"
    },
    {
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "context": "CREATE TABLE dogs (name VARCHAR, dog_id VARCHAR, cost_of_treatment INTEGER); CREATE TABLE treatments (name VARCHAR, dog_id VARCHAR, cost_of_treatment INTEGER)",
        "answer": "SELECT name FROM dogs WHERE NOT dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)"
    },
    {
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "context": "CREATE TABLE Owners (first_name VARCHAR, name VARCHAR); CREATE TABLE Dogs (first_name VARCHAR, name VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, name VARCHAR)",
        "answer": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "context": "CREATE TABLE Owners (first_name VARCHAR, name VARCHAR); CREATE TABLE Dogs (first_name VARCHAR, name VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, name VARCHAR)",
        "answer": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, email_address VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id"
    },
    {
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, email_address VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id"
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, first_name VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, first_name VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "context": "CREATE TABLE Dogs (breed_code VARCHAR); CREATE TABLE Breeds (breed_name VARCHAR, breed_code VARCHAR)",
        "answer": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "context": "CREATE TABLE Dogs (breed_code VARCHAR); CREATE TABLE Breeds (breed_name VARCHAR, breed_code VARCHAR)",
        "answer": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "context": "CREATE TABLE Owners (owner_id VARCHAR, last_name VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "context": "CREATE TABLE Owners (owner_id VARCHAR, last_name VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the description of the treatment type that costs the least money in total?",
        "context": "CREATE TABLE Treatments (treatment_type_code VARCHAR); CREATE TABLE Treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR)",
        "answer": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(cost_of_treatment) LIMIT 1"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "context": "CREATE TABLE Treatments (dog_id VARCHAR, cost_of_treatment INTEGER); CREATE TABLE Owners (owner_id VARCHAR, zip_code VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "context": "CREATE TABLE Treatments (dog_id VARCHAR, cost_of_treatment INTEGER); CREATE TABLE Owners (owner_id VARCHAR, zip_code VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR)",
        "answer": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, cell_number VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR, cell_number VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "context": "CREATE TABLE Treatments (cost_of_treatment INTEGER); CREATE TABLE Professionals (first_name VARCHAR, last_name VARCHAR); CREATE TABLE Treatments (Id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)"
    },
    {
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "context": "CREATE TABLE Treatments (cost_of_treatment INTEGER); CREATE TABLE Professionals (first_name VARCHAR, last_name VARCHAR); CREATE TABLE Treatments (Id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)"
    },
    {
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "context": "CREATE TABLE Treatments (date_of_treatment VARCHAR, professional_id VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, professional_id VARCHAR)",
        "answer": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id"
    },
    {
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "context": "CREATE TABLE Treatments (date_of_treatment VARCHAR, professional_id VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, professional_id VARCHAR)",
        "answer": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "context": "CREATE TABLE Treatments (cost_of_treatment VARCHAR, treatment_type_code VARCHAR); CREATE TABLE treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR)",
        "answer": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code"
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "context": "CREATE TABLE Treatments (cost_of_treatment VARCHAR, treatment_type_code VARCHAR); CREATE TABLE treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR)",
        "answer": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code"
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (size_code VARCHAR, owner_id VARCHAR)",
        "answer": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id"
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (size_code VARCHAR, owner_id VARCHAR)",
        "answer": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id"
    },
    {
        "question": "List pairs of the owner's first name and the dogs's name.",
        "context": "CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR)",
        "answer": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id"
    },
    {
        "question": "List pairs of the owner's first name and the dogs's name.",
        "context": "CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR)",
        "answer": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id"
    },
    {
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "context": "CREATE TABLE Dogs (name VARCHAR, dog_id VARCHAR, breed_code VARCHAR); CREATE TABLE Treatments (date_of_treatment VARCHAR, dog_id VARCHAR); CREATE TABLE Dogs (breed_code VARCHAR)",
        "answer": "SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "context": "CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR, state VARCHAR)",
        "answer": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'"
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "context": "CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR, state VARCHAR)",
        "answer": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "context": "CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id"
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "context": "CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id"
    },
    {
        "question": "List the last name of the owner owning the youngest dog.",
        "context": "CREATE TABLE Owners (last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, age INTEGER); CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT MAX(age) FROM Dogs)"
    },
    {
        "question": "List the last name of the owner owning the youngest dog.",
        "context": "CREATE TABLE Owners (last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, age INTEGER); CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT MAX(age) FROM Dogs)"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "context": "CREATE TABLE Professionals (email_address VARCHAR, state VARCHAR)",
        "answer": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "context": "CREATE TABLE Professionals (email_address VARCHAR, state VARCHAR)",
        "answer": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "context": "CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR)",
        "answer": "SELECT date_arrived, date_departed FROM Dogs"
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "context": "CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR)",
        "answer": "SELECT date_arrived, date_departed FROM Dogs"
    },
    {
        "question": "How many dogs went through any treatments?",
        "context": "CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT dog_id) FROM Treatments"
    },
    {
        "question": "How many dogs went through any treatments?",
        "context": "CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT dog_id) FROM Treatments"
    },
    {
        "question": "How many professionals have performed any treatment to dogs?",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT professional_id) FROM Treatments"
    },
    {
        "question": "How many professionals have performed any treatment to dogs?",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT professional_id) FROM Treatments"
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "context": "CREATE TABLE professionals (role_code VARCHAR, street VARCHAR, city VARCHAR, state VARCHAR)",
        "answer": "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "context": "CREATE TABLE professionals (role_code VARCHAR, street VARCHAR, city VARCHAR, state VARCHAR)",
        "answer": "SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, email_address VARCHAR, state VARCHAR)",
        "answer": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "context": "CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, email_address VARCHAR, state VARCHAR)",
        "answer": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "question": "How many dogs have an age below the average?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)"
    },
    {
        "question": "How many dogs have an age below the average?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)"
    },
    {
        "question": "How much does the most recent treatment cost?",
        "context": "CREATE TABLE Treatments (cost_of_treatment VARCHAR, date_of_treatment VARCHAR)",
        "answer": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "question": "How much does the most recent treatment cost?",
        "context": "CREATE TABLE Treatments (cost_of_treatment VARCHAR, date_of_treatment VARCHAR)",
        "answer": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "question": "How many dogs have not gone through any treatment?",
        "context": "CREATE TABLE Dogs (dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Dogs WHERE NOT dog_id IN (SELECT dog_id FROM Treatments)"
    },
    {
        "question": "Tell me the number of dogs that have not received any treatment .",
        "context": "CREATE TABLE treatments (dog_id VARCHAR); CREATE TABLE dogs (dog_id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM dogs WHERE NOT dog_id IN (SELECT dog_id FROM treatments)"
    },
    {
        "question": "How many owners temporarily do not have any dogs?",
        "context": "CREATE TABLE Dogs (owner_id VARCHAR); CREATE TABLE Owners (owner_id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Owners WHERE NOT owner_id IN (SELECT owner_id FROM Dogs)"
    },
    {
        "question": "How many professionals did not operate any treatment on dogs?",
        "context": "CREATE TABLE Professionals (professional_id VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Professionals WHERE NOT professional_id IN (SELECT professional_id FROM Treatments)"
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "context": "CREATE TABLE Dogs (name VARCHAR, age VARCHAR, weight VARCHAR, abandoned_yn VARCHAR)",
        "answer": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "context": "CREATE TABLE Dogs (name VARCHAR, age VARCHAR, weight VARCHAR, abandoned_yn VARCHAR)",
        "answer": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
    },
    {
        "question": "What is the average age of all the dogs?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT AVG(age) FROM Dogs"
    },
    {
        "question": "What is the average age of all the dogs?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT AVG(age) FROM Dogs"
    },
    {
        "question": "What is the age of the oldest dog?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT MAX(age) FROM Dogs"
    },
    {
        "question": "What is the age of the oldest dog?",
        "context": "CREATE TABLE Dogs (age INTEGER)",
        "answer": "SELECT MAX(age) FROM Dogs"
    },
    {
        "question": "How much does each charge type costs? List both charge type and amount.",
        "context": "CREATE TABLE Charges (charge_type VARCHAR, charge_amount VARCHAR)",
        "answer": "SELECT charge_type, charge_amount FROM Charges"
    },
    {
        "question": "How much does each charge type costs? List both charge type and amount.",
        "context": "CREATE TABLE Charges (charge_type VARCHAR, charge_amount VARCHAR)",
        "answer": "SELECT charge_type, charge_amount FROM Charges"
    },
    {
        "question": "How much does the most expensive charge type costs?",
        "context": "CREATE TABLE Charges (charge_amount INTEGER)",
        "answer": "SELECT MAX(charge_amount) FROM Charges"
    },
    {
        "question": "How much does the most expensive charge type costs?",
        "context": "CREATE TABLE Charges (charge_amount INTEGER)",
        "answer": "SELECT MAX(charge_amount) FROM Charges"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "context": "CREATE TABLE professionals (email_address VARCHAR, cell_number VARCHAR, home_phone VARCHAR)",
        "answer": "SELECT email_address, cell_number, home_phone FROM professionals"
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "context": "CREATE TABLE professionals (email_address VARCHAR, cell_number VARCHAR, home_phone VARCHAR)",
        "answer": "SELECT email_address, cell_number, home_phone FROM professionals"
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "context": "CREATE TABLE dogs (breed_code VARCHAR, size_code VARCHAR)",
        "answer": "SELECT DISTINCT breed_code, size_code FROM dogs"
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "context": "CREATE TABLE dogs (breed_code VARCHAR, size_code VARCHAR)",
        "answer": "SELECT DISTINCT breed_code, size_code FROM dogs"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR, treatment_type_code VARCHAR); CREATE TABLE Treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR); CREATE TABLE professionals (first_name VARCHAR, professional_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code"
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "context": "CREATE TABLE Treatments (professional_id VARCHAR, treatment_type_code VARCHAR); CREATE TABLE Treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR); CREATE TABLE professionals (first_name VARCHAR, professional_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name, T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code"
    },
    {
        "question": "How many singers do we have?",
        "context": "CREATE TABLE singer (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM singer"
    },
    {
        "question": "How many singers do we have?",
        "context": "CREATE TABLE singer (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM singer"
    },
    {
        "question": "List the name of singers in ascending order of net worth.",
        "context": "CREATE TABLE singer (Name VARCHAR, Net_Worth_Millions VARCHAR)",
        "answer": "SELECT Name FROM singer ORDER BY Net_Worth_Millions"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "context": "CREATE TABLE singer (Birth_Year VARCHAR, Citizenship VARCHAR)",
        "answer": "SELECT Birth_Year, Citizenship FROM singer"
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "context": "CREATE TABLE singer (Birth_Year VARCHAR, Citizenship VARCHAR)",
        "answer": "SELECT Birth_Year, Citizenship FROM singer"
    },
    {
        "question": "List the name of singers whose citizenship is not \"France\".",
        "context": "CREATE TABLE singer (Name VARCHAR, Citizenship VARCHAR)",
        "answer": "SELECT Name FROM singer WHERE Citizenship <> \"France\""
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "context": "CREATE TABLE singer (Name VARCHAR, Birth_Year VARCHAR)",
        "answer": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949"
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "context": "CREATE TABLE singer (Name VARCHAR, Birth_Year VARCHAR)",
        "answer": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949"
    },
    {
        "question": "What is the name of the singer with the largest net worth?",
        "context": "CREATE TABLE singer (Name VARCHAR, Net_Worth_Millions VARCHAR)",
        "answer": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "question": "What is the name of the singer with the largest net worth?",
        "context": "CREATE TABLE singer (Name VARCHAR, Net_Worth_Millions VARCHAR)",
        "answer": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR)",
        "answer": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR)",
        "answer": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "question": "Please show the most common citizenship of singers.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR)",
        "answer": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Please show the most common citizenship of singers.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR)",
        "answer": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR, Net_Worth_Millions INTEGER)",
        "answer": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR, Net_Worth_Millions INTEGER)",
        "answer": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "question": "Show titles of songs and names of singers.",
        "context": "CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Title VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT T2.Title, T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID"
    },
    {
        "question": "Show titles of songs and names of singers.",
        "context": "CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Title VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT T2.Title, T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID"
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "context": "CREATE TABLE song (Singer_ID VARCHAR, Sales INTEGER); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000"
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "context": "CREATE TABLE song (Singer_ID VARCHAR, Sales INTEGER); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000"
    },
    {
        "question": "Show the names of singers that have more than one song.",
        "context": "CREATE TABLE song (Singer_ID VARCHAR); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1"
    },
    {
        "question": "Show the names of singers that have more than one song.",
        "context": "CREATE TABLE song (Singer_ID VARCHAR); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1"
    },
    {
        "question": "Show the names of singers and the total sales of their songs.",
        "context": "CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Sales INTEGER, Singer_ID VARCHAR)",
        "answer": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "question": "Show the names of singers and the total sales of their songs.",
        "context": "CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Sales INTEGER, Singer_ID VARCHAR)",
        "answer": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "question": "List the name of singers that do not have any song.",
        "context": "CREATE TABLE song (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)",
        "answer": "SELECT Name FROM singer WHERE NOT Singer_ID IN (SELECT Singer_ID FROM song)"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR, Birth_Year INTEGER)",
        "answer": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955"
    },
    {
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "context": "CREATE TABLE singer (Citizenship VARCHAR, Birth_Year INTEGER)",
        "answer": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955"
    },
    {
        "question": "How many available features are there in total?",
        "context": "CREATE TABLE Other_Available_Features (Id VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Other_Available_Features"
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "context": "CREATE TABLE Other_Available_Features (feature_type_code VARCHAR, feature_name VARCHAR); CREATE TABLE Ref_Feature_Types (feature_type_name VARCHAR, feature_type_code VARCHAR)",
        "answer": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\""
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "context": "CREATE TABLE Properties (property_type_code VARCHAR); CREATE TABLE Ref_Property_Types (property_type_description VARCHAR, property_type_code VARCHAR)",
        "answer": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code"
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "context": "CREATE TABLE Properties (property_name VARCHAR, property_type_code VARCHAR, room_count VARCHAR)",
        "answer": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1"
    }
]